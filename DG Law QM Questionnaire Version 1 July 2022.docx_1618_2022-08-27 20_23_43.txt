{"FileName":"DG Law QM Questionnaire Version 1 July 2022.docx_1618_2022-08-27 20:23:43.txt","Id":1618,"Title":"DG Law QM Questionnaire Version 1 July 2022.docx","Description":"To gather accurate information that assists manual drafting","Pages":"","Revision":"","Author":"karl.chapman@kimtechnologies.com","Keywords":"","Created":"","LastSave":"","Exported":"8/27/2022 8:23:43 PM","Lists":"{\"TemplateId\":\"1618\",\"Layout\":\"[{\\\"Id\\\":\\\"SectionHeader10\\\",\\\"Label\\\":\\\"6. Financial Services Activity\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":0,\\\"i\\\":\\\"SectionHeader10\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":2,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#0062B1\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FinServicesOffered\\\",\\\"Label\\\":\\\"Does your firm offer (or want to offer) any services which are classified as regulated Financial Service Activities such as insurance distribution (e.g. advising on, arranging insurance as part of matters such as ATE or insurance as part of conveyancing/probate matters), consumer credit (e.g. allowing clients time to pay their bill), (advising or arranging investments)?  Please list all areas.\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":4,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":1,\\\"i\\\":\\\"FinServicesOffered\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":3,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FinServiceSRA\\\",\\\"Label\\\":\\\"If already conducting these, when were they approved by the SRA?\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":4,\\\"i\\\":\\\"FinServiceSRA\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":4,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"EPFRegNo\\\",\\\"Label\\\":\\\"If you have one, what is your Exempt Professional Firm (EPF) registration number?\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":4,\\\"i\\\":\\\"EPFRegNo\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":5,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader11\\\",\\\"Label\\\":\\\"7. File Review Matrix\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":7,\\\"i\\\":\\\"SectionHeader11\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":6,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#0062B1\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader12\\\",\\\"Label\\\":\\\"Please complete the below file review matrix.  This table should show the number of files reviewed for each fee earner, who reviews who and how often.  If you need to add more than nine rows please attach a separate spreadsheet.  \\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":4,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":9,\\\"i\\\":\\\"SectionHeader12\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":7,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FileReview1\\\",\\\"Label\\\":\\\"Category 1\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":10,\\\"i\\\":\\\"FileReview1\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":8,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ReviewerName1\\\",\\\"Label\\\":\\\"Reviewer Name 1\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":10,\\\"i\\\":\\\"ReviewerName1\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":9,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Reviewee1\\\",\\\"Label\\\":\\\"Reviewee 1\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":10,\\\"i\\\":\\\"Reviewee1\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":10,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FilesPCM1\\\",\\\"Label\\\":\\\"Files PCM 1\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":10,\\\"i\\\":\\\"FilesPCM1\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":11,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FileReview2\\\",\\\"Label\\\":\\\"Category 2\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":12,\\\"i\\\":\\\"FileReview2\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":12,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ReviewerName2\\\",\\\"Label\\\":\\\"Reviewer Name 2\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":12,\\\"i\\\":\\\"ReviewerName2\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":13,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Reviewee2\\\",\\\"Label\\\":\\\"Reviewee 2\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":12,\\\"i\\\":\\\"Reviewee2\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":14,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FilesPCM2\\\",\\\"Label\\\":\\\"Files PCM 2\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":12,\\\"i\\\":\\\"FilesPCM2\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":15,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FileReview3\\\",\\\"Label\\\":\\\"Category 3\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":14,\\\"i\\\":\\\"FileReview3\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":16,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ReviewerName3\\\",\\\"Label\\\":\\\"Reviewer Name 3\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":14,\\\"i\\\":\\\"ReviewerName3\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":17,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Reviewee3\\\",\\\"Label\\\":\\\"Reviewee 3\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":14,\\\"i\\\":\\\"Reviewee3\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":18,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FilesPCM3\\\",\\\"Label\\\":\\\"Files PCM 3\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":14,\\\"i\\\":\\\"FilesPCM3\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":19,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FileReview4\\\",\\\"Label\\\":\\\"Category 4\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":16,\\\"i\\\":\\\"FileReview4\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":20,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ReviewerName4\\\",\\\"Label\\\":\\\"Reviewer Name 4\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":16,\\\"i\\\":\\\"ReviewerName4\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":21,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Reviewee4\\\",\\\"Label\\\":\\\"Reviewee 4\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":16,\\\"i\\\":\\\"Reviewee4\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":22,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FilesPCM4\\\",\\\"Label\\\":\\\"Files PCM 4\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":16,\\\"i\\\":\\\"FilesPCM4\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":23,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FileReview5\\\",\\\"Label\\\":\\\"Category 5\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":18,\\\"i\\\":\\\"FileReview5\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":24,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ReviewerName5\\\",\\\"Label\\\":\\\"Reviewer Name 5\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":18,\\\"i\\\":\\\"ReviewerName5\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":25,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Reviewee5\\\",\\\"Label\\\":\\\"Reviewee 5\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":18,\\\"i\\\":\\\"Reviewee5\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":26,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FilesPCM5\\\",\\\"Label\\\":\\\"Files PCM 5\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":18,\\\"i\\\":\\\"FilesPCM5\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":27,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FileReview6\\\",\\\"Label\\\":\\\"Category 6\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":20,\\\"i\\\":\\\"FileReview6\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":28,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ReviewerName6\\\",\\\"Label\\\":\\\"Reviewer Name 6\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":20,\\\"i\\\":\\\"ReviewerName6\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":29,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Reviewee6\\\",\\\"Label\\\":\\\"Reviewee 6\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":20,\\\"i\\\":\\\"Reviewee6\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":30,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FilesPCM6\\\",\\\"Label\\\":\\\"Files PCM 6\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":20,\\\"i\\\":\\\"FilesPCM6\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":31,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FileReview7\\\",\\\"Label\\\":\\\"Category 7\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":22,\\\"i\\\":\\\"FileReview7\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":32,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ReviewerName7\\\",\\\"Label\\\":\\\"Reviewer Name 7\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":22,\\\"i\\\":\\\"ReviewerName7\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":33,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Reviewee7\\\",\\\"Label\\\":\\\"Reviewee 7\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":22,\\\"i\\\":\\\"Reviewee7\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":34,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FilesPCM7\\\",\\\"Label\\\":\\\"Files PCM 7\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":22,\\\"i\\\":\\\"FilesPCM7\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":35,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FileReview8\\\",\\\"Label\\\":\\\"Category 8\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":24,\\\"i\\\":\\\"FileReview8\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":36,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ReviewerName8\\\",\\\"Label\\\":\\\"Reviewer Name 8\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":24,\\\"i\\\":\\\"ReviewerName8\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":37,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Reviewee8\\\",\\\"Label\\\":\\\"Reviewee 8\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":24,\\\"i\\\":\\\"Reviewee8\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":38,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FilesPCM8\\\",\\\"Label\\\":\\\"Files PCM 8\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":24,\\\"i\\\":\\\"FilesPCM8\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":39,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FileReview9\\\",\\\"Label\\\":\\\"Category 9\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":26,\\\"i\\\":\\\"FileReview9\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":40,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ReviewerName9\\\",\\\"Label\\\":\\\"Reviewer Name 9\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":26,\\\"i\\\":\\\"ReviewerName9\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":41,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Reviewee9\\\",\\\"Label\\\":\\\"Reviewee 9\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":26,\\\"i\\\":\\\"Reviewee9\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":42,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FilesPCM9\\\",\\\"Label\\\":\\\"Files PCM 9\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":26,\\\"i\\\":\\\"FilesPCM9\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":43,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader13\\\",\\\"Label\\\":\\\"Please progress to Tab 3\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":28,\\\"i\\\":\\\"SectionHeader13\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"2\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":44,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#F44E3B\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader14\\\",\\\"Label\\\":\\\"8. Individual Roles\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":0,\\\"i\\\":\\\"SectionHeader14\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":2,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#0062B1\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Paragraph2\\\",\\\"Label\\\":\\\"Paragraph2\\\",\\\"Type\\\":12,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":4,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":1,\\\"i\\\":\\\"Paragraph2\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"Could you kindly confirm the name of the person(s) with responsibility for each of the following compliance areas.  In the vast majority of cases, your designated COLP (or COFA for financial management matters or DPO for data protection, if different) will have overall responsibility for compliance including reviewing any policies and ensuring overall compliance but some tasks may be delegated to (or shared with) other staff members on a day to day level on the understanding that there is some means or compliance system through which they report issues to your COLP (or COFA).\\\",\\\"Children\\\":[],\\\"TabIndex\\\":3,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":14,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"RiskManager\\\",\\\"Label\\\":\\\"Risk Manager\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":4,\\\"i\\\":\\\"RiskManager\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":5,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"RiskRegister\\\",\\\"Label\\\":\\\"Risk Register\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":4,\\\"i\\\":\\\"RiskRegister\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":6,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"CompliancePolicy\\\",\\\"Label\\\":\\\"Compliance Policy & Plan\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":4,\\\"i\\\":\\\"CompliancePolicy\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":7,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"RiskManagement\\\",\\\"Label\\\":\\\"Risk Management Policy & Procedures\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":4,\\\"i\\\":\\\"RiskManagement\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":8,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ConflictofI\\\",\\\"Label\\\":\\\"Conflict Of Interest Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":6,\\\"i\\\":\\\"ConflictofI\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":9,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Confidentiality\\\",\\\"Label\\\":\\\"Confidentiality Policy & Disclosure to Clients\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":6,\\\"i\\\":\\\"Confidentiality\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":10,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Whistleblowing\\\",\\\"Label\\\":\\\"Whistleblowing\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"Pattern did not match.\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":6,\\\"i\\\":\\\"Whistleblowing\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":11,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":14,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Outsourcing\\\",\\\"Label\\\":\\\"Outsourcing\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"Pattern did not match.\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":26,\\\"i\\\":\\\"Outsourcing\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":44,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":14,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Contractors\\\",\\\"Label\\\":\\\"Contractors\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"Pattern did not match.\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":26,\\\"i\\\":\\\"Contractors\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":43,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":14,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"BusinessContinuity\\\",\\\"Label\\\":\\\"Business Continuity Plan and Reviews\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":19,\\\"i\\\":\\\"BusinessContinuity\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":34,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Instructions\\\",\\\"Label\\\":\\\"Accepting and Declining Instructions\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":9,\\\"i\\\":\\\"Instructions\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":13,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FileAllocation\\\",\\\"Label\\\":\\\"File Allocation\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":9,\\\"i\\\":\\\"FileAllocation\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":14,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ClientCare\\\",\\\"Label\\\":\\\"Client Care & Commitment to Quality Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":9,\\\"i\\\":\\\"ClientCare\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":15,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ClientSatisfaction\\\",\\\"Label\\\":\\\"Client Satisfaction & Referrals\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":9,\\\"i\\\":\\\"ClientSatisfaction\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":16,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"QMReview\\\",\\\"Label\\\":\\\"Quality Manual Review and Updates\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":11,\\\"i\\\":\\\"QMReview\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":17,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ComplaintsHandling\\\",\\\"Label\\\":\\\"Complaints Handling\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":11,\\\"i\\\":\\\"ComplaintsHandling\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":18,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ComplaintsRep\\\",\\\"Label\\\":\\\"Complaints Representative\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":11,\\\"i\\\":\\\"ComplaintsRep\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":19,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"DeputyComplaintsRep\\\",\\\"Label\\\":\\\"Deputy Complaints Representative\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":11,\\\"i\\\":\\\"DeputyComplaintsRep\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":20,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Equality\\\",\\\"Label\\\":\\\"Equality & Diversity Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":26,\\\"i\\\":\\\"Equality\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":41,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"EqualityTraining\\\",\\\"Label\\\":\\\"Equality & Diversity Training and Communication Plan\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":26,\\\"i\\\":\\\"EqualityTraining\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":42,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FinancialCrime\\\",\\\"Label\\\":\\\"Financial Crime\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":14,\\\"i\\\":\\\"FinancialCrime\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":22,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"AML\\\",\\\"Label\\\":\\\"Anti Money Laundering and Countering Terrorist Financing Policy and Procedures\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":14,\\\"i\\\":\\\"AML\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":25,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"AntiBribery\\\",\\\"Label\\\":\\\"Anti Bribery and Gifts & Hospitality Policies\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":14,\\\"i\\\":\\\"AntiBribery\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":23,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"DeputyAntiBribery\\\",\\\"Label\\\":\\\"Deputy Anti Bribery\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":14,\\\"i\\\":\\\"DeputyAntiBribery\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":24,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"MortgageFraud\\\",\\\"Label\\\":\\\"Mortgage Fraud\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":16,\\\"i\\\":\\\"MortgageFraud\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":26,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"BenefitFraud\\\",\\\"Label\\\":\\\"Benefit Fraud\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":16,\\\"i\\\":\\\"BenefitFraud\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":27,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FinServicesOverall\\\",\\\"Label\\\":\\\"Financial Services Overall\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":16,\\\"i\\\":\\\"FinServicesOverall\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":28,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"InsuranceOfficer\\\",\\\"Label\\\":\\\"Insurance Officer\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":16,\\\"i\\\":\\\"InsuranceOfficer\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":29,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"BusinessPlan\\\",\\\"Label\\\":\\\"Business Plan\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":19,\\\"i\\\":\\\"BusinessPlan\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":31,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FinancialBilling\\\",\\\"Label\\\":\\\"Financial Billing Procedures\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":19,\\\"i\\\":\\\"FinancialBilling\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":33,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"MarketingObjectives\\\",\\\"Label\\\":\\\"Marketing Objectives\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":21,\\\"i\\\":\\\"MarketingObjectives\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":35,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"MarketingPlan\\\",\\\"Label\\\":\\\"Marketing Plan\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":21,\\\"i\\\":\\\"MarketingPlan\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":36,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"WebsiteManagement\\\",\\\"Label\\\":\\\"Website Management\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":21,\\\"i\\\":\\\"WebsiteManagement\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":37,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SocialMedia\\\",\\\"Label\\\":\\\"Social Media Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":21,\\\"i\\\":\\\"SocialMedia\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":38,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Publicity\\\",\\\"Label\\\":\\\"Publicity Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":23,\\\"i\\\":\\\"Publicity\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":39,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Recruitment\\\",\\\"Label\\\":\\\"Recruitment Policy and Procedures\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":28,\\\"i\\\":\\\"Recruitment\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":45,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FlexibleWorking\\\",\\\"Label\\\":\\\"Flexible Working Policy and Procedures\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":28,\\\"i\\\":\\\"FlexibleWorking\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":46,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"HomeWorkingPolicy\\\",\\\"Label\\\":\\\"Home Working Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":28,\\\"i\\\":\\\"HomeWorkingPolicy\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":47,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"GrievanceProcedure\\\",\\\"Label\\\":\\\"Grievance Procedure\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":28,\\\"i\\\":\\\"GrievanceProcedure\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":48,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"DeputyGrievanceProcedure\\\",\\\"Label\\\":\\\"Deputy Grievance Procedure\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":30,\\\"i\\\":\\\"DeputyGrievanceProcedure\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":49,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"PeopleManagement\\\",\\\"Label\\\":\\\"People Management\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":30,\\\"i\\\":\\\"PeopleManagement\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":50,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"HealthandSaftey\\\",\\\"Label\\\":\\\"Health and Safety\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":30,\\\"i\\\":\\\"HealthandSaftey\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":51,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FireSafety\\\",\\\"Label\\\":\\\"Fire Safety\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":32,\\\"i\\\":\\\"FireSafety\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":53,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FirstAid\\\",\\\"Label\\\":\\\"First Aid\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":32,\\\"i\\\":\\\"FirstAid\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":54,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OfficeEquipment\\\",\\\"Label\\\":\\\"Office Equipment\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":30,\\\"i\\\":\\\"OfficeEquipment\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":52,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"PerformancePolicy\\\",\\\"Label\\\":\\\"Performance Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":32,\\\"i\\\":\\\"PerformancePolicy\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":55,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"PerformanceProcedures\\\",\\\"Label\\\":\\\"Performance Procedures\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":32,\\\"i\\\":\\\"PerformanceProcedures\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":56,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Library\\\",\\\"Label\\\":\\\"Library & Sharing of Legal Research/Information\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":34,\\\"i\\\":\\\"Library\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":58,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"TrainingPlans\\\",\\\"Label\\\":\\\"Training Plans\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":34,\\\"i\\\":\\\"TrainingPlans\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":57,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"CSR\\\",\\\"Label\\\":\\\"CSR Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":37,\\\"i\\\":\\\"CSR\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":60,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Environmental\\\",\\\"Label\\\":\\\"Environmental Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":37,\\\"i\\\":\\\"Environmental\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":61,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ChildSafeguarding\\\",\\\"Label\\\":\\\"Child Safeguarding Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":37,\\\"i\\\":\\\"ChildSafeguarding\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":62,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SeniorReportingOfficer\\\",\\\"Label\\\":\\\"Senior Reporting Officer\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":37,\\\"i\\\":\\\"SeniorReportingOfficer\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":63,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"StampDuty\\\",\\\"Label\\\":\\\"Stamp Duty Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":39,\\\"i\\\":\\\"StampDuty\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":64,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"PurchaseLeasehold\\\",\\\"Label\\\":\\\"Purchase Leasehold Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":39,\\\"i\\\":\\\"PurchaseLeasehold\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":65,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ActingforLenders\\\",\\\"Label\\\":\\\"Acting for Lenders Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":39,\\\"i\\\":\\\"ActingforLenders\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":66,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader16\\\",\\\"Label\\\":\\\"Please progress to Tab 4\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":41,\\\"i\\\":\\\"SectionHeader16\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":67,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#F44E3B\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"EvaluationBusinessPlan\\\",\\\"Label\\\":\\\"Evaluation and Reviews of Business and Strategic Planning and Objectives\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":19,\\\"i\\\":\\\"EvaluationBusinessPlan\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":32,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader20\\\",\\\"Label\\\":\\\"A. Risk and Confidentiality\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":3,\\\"i\\\":\\\"SectionHeader20\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":4,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader22\\\",\\\"Label\\\":\\\"B. File Handling, Complaints and Quality\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":8,\\\"i\\\":\\\"SectionHeader22\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":12,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader23\\\",\\\"Label\\\":\\\"C. Anti Bribery and Fraud\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":13,\\\"i\\\":\\\"SectionHeader23\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":21,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader24\\\",\\\"Label\\\":\\\"D. Business and Marketing Planning\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":18,\\\"i\\\":\\\"SectionHeader24\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":30,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader25\\\",\\\"Label\\\":\\\"E. People\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":25,\\\"i\\\":\\\"SectionHeader25\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":40,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader26\\\",\\\"Label\\\":\\\"F. Miscellaneous\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":36,\\\"i\\\":\\\"SectionHeader26\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"3\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":59,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader17\\\",\\\"Label\\\":\\\"9. Data Protection and Information Governance\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":0,\\\"i\\\":\\\"SectionHeader17\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":2,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#0062B1\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Paragraph3\\\",\\\"Label\\\":\\\"\\\",\\\"Type\\\":12,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":4,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":1,\\\"i\\\":\\\"Paragraph3\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"As part of our service, we can provide a template Data protection & Information Governance Manual.  This will need to be adapted by the firm to suit its own particular circumstances.  However, we can provide a workable draft for you to tailor at your end and implement. Please confirm the following:\\\",\\\"Children\\\":[],\\\"TabIndex\\\":3,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ICORegNo\\\",\\\"Label\\\":\\\"What is the firm’s ICO registration number? \\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":3,\\\"i\\\":\\\"ICORegNo\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":4,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"DataProtectionName\\\",\\\"Label\\\":\\\"Who has been appointed as responsible for data protection ?\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":5,\\\"i\\\":\\\"DataProtectionName\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":5,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"DataProtectionRole\\\",\\\"Label\\\":\\\"What is their role (Data Protection Officer ...)??\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":5,\\\"i\\\":\\\"DataProtectionRole\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":6,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"PersonalEmails\\\",\\\"Label\\\":\\\"Do you permit staff to send personal emails from the firm’s computers or other devices? \\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Yes,No\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":7,\\\"i\\\":\\\"PersonalEmails\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":7,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"UseOwnDevices\\\",\\\"Label\\\":\\\"Do you permit staff (including managers) to use their own mobile devices, laptops or other equipment?\\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Yes,No\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":7,\\\"i\\\":\\\"UseOwnDevices\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":8,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"UseCCTV\\\",\\\"Label\\\":\\\"Does the firm operate a CCTV system? \\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":9,\\\"i\\\":\\\"UseCCTV\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":9,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"DateStartedCCTV\\\",\\\"Label\\\":\\\"If yes, was this implemented before or after May 2018?\\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Before May 2018,After May 2018\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":9,\\\"i\\\":\\\"DateStartedCCTV\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":10,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"DataProtectionPolicy\\\",\\\"Label\\\":\\\"Data Protection Policy and Procedures\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":13,\\\"i\\\":\\\"DataProtectionPolicy\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":12,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"InfoManagement\\\",\\\"Label\\\":\\\"Information Security Management Policies & Procedures\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":13,\\\"i\\\":\\\"InfoManagement\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":13,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"DataProtectionImpact\\\",\\\"Label\\\":\\\"Data Protection Impact Assessment Procedure\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":13,\\\"i\\\":\\\"DataProtectionImpact\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":14,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Archiving\\\",\\\"Label\\\":\\\"Archiving, Retention & Destruction Procedure\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":13,\\\"i\\\":\\\"Archiving\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":15,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ITResources\\\",\\\"Label\\\":\\\"IT Resources\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":15,\\\"i\\\":\\\"ITResources\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":16,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"EmailPolicy\\\",\\\"Label\\\":\\\"Email Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":15,\\\"i\\\":\\\"EmailPolicy\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":17,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"AcceptableUse\\\",\\\"Label\\\":\\\"Acceptable Use of the Firm’s IT Facilities Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":15,\\\"i\\\":\\\"AcceptableUse\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":18,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"UsePersonalDevices\\\",\\\"Label\\\":\\\"Use of Personally-Owned Devices Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":15,\\\"i\\\":\\\"UsePersonalDevices\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":19,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"EndEmployment\\\",\\\"Label\\\":\\\"End of Employment Procedure\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":17,\\\"i\\\":\\\"EndEmployment\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":20,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"CyberCrime\\\",\\\"Label\\\":\\\"Cybercrime and Fraud Prevention Policy\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":17,\\\"i\\\":\\\"CyberCrime\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":21,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"CreditCardPolicy\\\",\\\"Label\\\":\\\"Credit Card Policy (if applicable)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":17,\\\"i\\\":\\\"CreditCardPolicy\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":22,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"CCTVPolicy\\\",\\\"Label\\\":\\\"CCTV Policy (if applicable)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":17,\\\"i\\\":\\\"CCTVPolicy\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":23,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"InfoAccessRequest\\\",\\\"Label\\\":\\\"Information and Data Subject Access Requests Procedure\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":19,\\\"i\\\":\\\"InfoAccessRequest\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":24,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Paragraph4\\\",\\\"Label\\\":\\\"Paragraph4\\\",\\\"Type\\\":12,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":4,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":11,\\\"i\\\":\\\"Paragraph4\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"Can you kindly confirm the name of the person(s) with responsibility for each of the following compliance areas.  In the vast majority of cases, your designated DPO will have overall responsibility for compliance but some tasks may be delegated to (or shared with) other staff members.\\\",\\\"Children\\\":[],\\\"TabIndex\\\":11,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader19\\\",\\\"Label\\\":\\\"Thank you for completing this questionnaire - please Submit\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":21,\\\"i\\\":\\\"SectionHeader19\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"4\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":25,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#F44E3B\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader1\\\",\\\"Label\\\":\\\"DG Law Quality Manual Questionnaire\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":4,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":0,\\\"i\\\":\\\"SectionHeader1\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":2,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#0062B1\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Paragraph1\\\",\\\"Label\\\":\\\"Paragraph 1\\\",\\\"Type\\\":12,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":4,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":1,\\\"i\\\":\\\"Paragraph1\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"Many of the questions that follow are mandatory and marked with a red *. This is to demonstrate that, for audit purposes, you have considered all necessary areas and responded even if the answer is N/A (Not Applicable). When you reach the end of each tab please progress to the next tab. If you wish to save a draft please 'Submit' and you can then re-open the draft by selecting 'Update Form' from the 'Action' menu on the right hand side. Each submit will have its own version number.\\\",\\\"Children\\\":[],\\\"TabIndex\\\":3,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#4D4D4D\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"PrimaryAreasofLaw\\\",\\\"Label\\\":\\\"(i) Please confirm the areas of law practised by your firm (private and publicly funded). You may select more than one option. Please add any additional areas of law below if you have other areas.\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":4,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":6,\\\"i\\\":\\\"PrimaryAreasofLaw\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":6,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"AreaofLaw1\\\",\\\"Label\\\":\\\"Additional Area of Law 1\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":8,\\\"i\\\":\\\"AreaofLaw1\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":7,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"AreaofLaw2\\\",\\\"Label\\\":\\\"Additional Area of Law 2\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":8,\\\"i\\\":\\\"AreaofLaw2\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":8,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"AreaofLaw3\\\",\\\"Label\\\":\\\"Additional Area of Law 3\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":8,\\\"i\\\":\\\"AreaofLaw3\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":9,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"AreaofLaw4\\\",\\\"Label\\\":\\\"Additional Area of Law 4\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":10,\\\"i\\\":\\\"AreaofLaw4\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":10,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"AreaofLaw5\\\",\\\"Label\\\":\\\"Additional Area of Law 5\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":10,\\\"i\\\":\\\"AreaofLaw5\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":11,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"QualStandardsMaintain\\\",\\\"Label\\\":\\\"(i) What quality standards does the firm maintain?\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"CQS,Lexcel,SQM,WIQS,N/A\\\\n\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":13,\\\"i\\\":\\\"QualStandardsMaintain\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":13,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"QualStandardsObtain\\\",\\\"Label\\\":\\\"(ii) What quality standards does the firm want to obtain?\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"CQS, Lexcel,SQM,WIQS,N/A\\\\n\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":13,\\\"i\\\":\\\"QualStandardsObtain\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":14,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader4\\\",\\\"Label\\\":\\\"1. Areas of Law\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":3,\\\"i\\\":\\\"SectionHeader4\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":4,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#0062B1\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader5\\\",\\\"Label\\\":\\\"2. Quality Standards\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":12,\\\"i\\\":\\\"SectionHeader5\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":12,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#0062B1\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader6\\\",\\\"Label\\\":\\\"3. Roles\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":16,\\\"i\\\":\\\"SectionHeader6\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":15,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#0062B1\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"COLPName\\\",\\\"Label\\\":\\\"(i) Who holds the role of Compliance Officer for Legal Practice (COLP)? \\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":17,\\\"i\\\":\\\"COLPName\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":16,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"COFAName\\\",\\\"Label\\\":\\\"(ii) Who holds the role of Compliance Officer for Finance and Administration (COFA)?\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":17,\\\"i\\\":\\\"COFAName\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":17,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SROName\\\",\\\"Label\\\":\\\"(iii) Who holds the role of Senior Reporting Officer (required for Lexcel and CQS)?\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":17,\\\"i\\\":\\\"SROName\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":18,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"LAAQualRepName\\\",\\\"Label\\\":\\\"If applicable, who holds the role of Legal Aid Agency Quality Representative (required for LAA contracts)?\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":17,\\\"i\\\":\\\"LAAQualRepName\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":19,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader7\\\",\\\"Label\\\":\\\"4. Client Money, Due Diligence and Central Diary\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":3,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":20,\\\"i\\\":\\\"SectionHeader7\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":20,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#0062B1\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ClientMoney\\\",\\\"Label\\\":\\\"(i) Does the firm hold or receive any client money? Please select the most appropriate option (only select one option).\\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Yes in client account, Yes in business account in accordance with Rule 2.2,\\\\nNo but maintain Third Party Managed Account (TPMA),No do not hold or receive any client money at all\\\\n\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":3,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":21,\\\"i\\\":\\\"ClientMoney\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":21,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"MLR2017Work\\\",\\\"Label\\\":\\\"(ii) Is the firm authorised to undertake or will it be seeking authorisation to undertake work within the MLR 2017? \\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Yes,No\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":23,\\\"i\\\":\\\"MLR2017Work\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":22,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"MLROName\\\",\\\"Label\\\":\\\"If 'Yes' to previous question who is the appointed MLRO?\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":23,\\\"i\\\":\\\"MLROName\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":23,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"MLCOName\\\",\\\"Label\\\":\\\"If 'Yes' to the question who is the appointed MLCO?\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":23,\\\"i\\\":\\\"MLCOName\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":24,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"InternalMLRO\\\",\\\"Label\\\":\\\"(iii) If you only conduct work oustide the AML regulations do you have an Internal MLRO?\\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Yes,No\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":25,\\\"i\\\":\\\"InternalMLRO\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":25,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"InternalMLROName\\\",\\\"Label\\\":\\\"If 'Yes' to the previous question who is the Internally Nominated MLRO?\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":25,\\\"i\\\":\\\"InternalMLROName\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":26,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ClientDDChecks\\\",\\\"Label\\\":\\\"(iv) In what areas of law, if any, do you conduct client due diligence checks?\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":5,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":28,\\\"i\\\":\\\"ClientDDChecks\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":27,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ElectronicDD\\\",\\\"Label\\\":\\\"Does the firm use an electronic CDD/identity verification system? \\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Yes,No\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":28,\\\"i\\\":\\\"ElectronicDD\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":28,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ElctronicDDSystem\\\",\\\"Label\\\":\\\"If 'Yes' to previous question, which electronic DD system do you use?\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":28,\\\"i\\\":\\\"ElctronicDDSystem\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":29,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ElectronicAllCertain\\\",\\\"Label\\\":\\\"Which areas of law / matters do you use your electronic DD system?\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":5,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":28,\\\"i\\\":\\\"ElectronicAllCertain\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":30,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"MaxCashPyt\\\",\\\"Label\\\":\\\"(v) What is the maximum cash payment the firm would accept? \\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":31,\\\"i\\\":\\\"MaxCashPyt\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":31,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"AcceptCreditCards\\\",\\\"Label\\\":\\\"Does the firm accept payments by credit / debit card payments? \\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Yes,No\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":31,\\\"i\\\":\\\"AcceptCreditCards\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":32,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"CentralLibrary\\\",\\\"Label\\\":\\\"(vi) Is the firm’s central diary maintained electronically or hard copy?  \\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Electronically,Hard Copy,Both\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":34,\\\"i\\\":\\\"CentralLibrary\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":33,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"ElectronicSource\\\",\\\"Label\\\":\\\"If electronic, is this through Outlook, Google or another source (please specify). \\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Google,Outlook,Other,\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":34,\\\"i\\\":\\\"ElectronicSource\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":34,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"CentralDiaryOther\\\",\\\"Label\\\":\\\"If you answered 'Other' to the previous question please specify.\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":34,\\\"i\\\":\\\"CentralDiaryOther\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":35,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"LegalSubscriptionsOther\\\",\\\"Label\\\":\\\"What legal subscriptions does the firm maintain if any (i.e. Lexis-Nexis, Lawtel, Crimeline)?  \\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Lexis Nexis,Lawtel,Crimeline,Other\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":34,\\\"i\\\":\\\"LegalSubscriptionsOther\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":36,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader8\\\",\\\"Label\\\":\\\"5. Fee Sharing\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":37,\\\"i\\\":\\\"SectionHeader8\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":37,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#0062B1\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FeeShare\\\",\\\"Label\\\":\\\"(i) Does the firm maintain any fee sharing or other commercial arrangements with third parties? \\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Yes,No\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":38,\\\"i\\\":\\\"FeeShare\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":38,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FeeSharingArea\\\",\\\"Label\\\":\\\"(ii) In what areas of law do you fee share (please select all areas)?\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":5,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":38,\\\"i\\\":\\\"FeeSharingArea\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":39,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FeeSharingName\\\",\\\"Label\\\":\\\"(iii) Please provide the names of all the third parties with whom you share fees.\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":38,\\\"i\\\":\\\"FeeSharingName\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":40,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FeeSharingAmount\\\",\\\"Label\\\":\\\"(iv) Please describe the amount of fee share received or given.\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":38,\\\"i\\\":\\\"FeeSharingAmount\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":41,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"FeeSharingOther\\\",\\\"Label\\\":\\\"(v) Please provide any other information re your fee sharing arrangements which you feel are relevant.\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":500,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":4,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":41,\\\"i\\\":\\\"FeeSharingOther\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":42,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader9\\\",\\\"Label\\\":\\\"Please progress to Tab 2\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":45,\\\"i\\\":\\\"SectionHeader9\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":44,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#F44E3B\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"WorkFromHome\\\",\\\"Label\\\":\\\"Do any staff work from home for all or part of their time (i.e. have an agreed flexible working \\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Yes,No,Unsure\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":43,\\\"i\\\":\\\"WorkFromHome\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":43,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"LawFirmName\\\",\\\"Label\\\":\\\"Confirm Your Law Firm Name\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":4,\\\"i\\\":\\\"LawFirmName\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":5,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true}]\",\"Lists\":\"[{\\\"ListProperty\\\":\\\"null\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":12,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Agriculture Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":13,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Aviation Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":14,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Border & Customs\\\\\\\"},{\\\\\\\"Id\\\\\\\":15,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Charities Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":16,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Children Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":17,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Civil Litigation\\\\\\\"},{\\\\\\\"Id\\\\\\\":18,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Claims Against Public Authorities\\\\\\\"},{\\\\\\\"Id\\\\\\\":19,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Clinical Negligence\\\\\\\"},{\\\\\\\"Id\\\\\\\":20,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Conveyancing\\\\\\\"},{\\\\\\\"Id\\\\\\\":21,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Leases\\\\\\\"},{\\\\\\\"Id\\\\\\\":22,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Litigation\\\\\\\"},{\\\\\\\"Id\\\\\\\":23,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Community Care\\\\\\\"},{\\\\\\\"Id\\\\\\\":24,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Company & Commercial\\\\\\\"},{\\\\\\\"Id\\\\\\\":25,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"14\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Consumer Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":26,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"15\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Contract Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":27,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"16\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Court of Protection\\\\\\\"},{\\\\\\\"Id\\\\\\\":28,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"17\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Crime\\\\\\\"},{\\\\\\\"Id\\\\\\\":29,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"18\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Debt\\\\\\\"},{\\\\\\\"Id\\\\\\\":30,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"19\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Debt Recovery\\\\\\\"},{\\\\\\\"Id\\\\\\\":31,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"20\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Dental Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":32,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"21\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Discrimination\\\\\\\"},{\\\\\\\"Id\\\\\\\":33,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"22\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Dispute Resolution\\\\\\\"},{\\\\\\\"Id\\\\\\\":34,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"23\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Education Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":35,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"24\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Employment Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":36,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"25\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Environment Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":37,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"26\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Family Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":38,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"27\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Family Mediation\\\\\\\"},{\\\\\\\"Id\\\\\\\":39,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"28\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Food Safety & Hygiene\\\\\\\"},{\\\\\\\"Id\\\\\\\":40,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"29\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Football Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":41,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"30\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Healthcare Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":42,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"31\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Holiday Illness\\\\\\\"},{\\\\\\\"Id\\\\\\\":43,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"32\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Housing Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":44,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"33\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Immigration & Asylum Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":45,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"34\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Intellectual Property\\\\\\\"},{\\\\\\\"Id\\\\\\\":46,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"35\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Landlord & Tenant – Commercial\\\\\\\"},{\\\\\\\"Id\\\\\\\":47,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"36\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Landlord & Tenant – Residential\\\\\\\"},{\\\\\\\"Id\\\\\\\":48,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"37\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Lasting Power of Attorney\\\\\\\"},{\\\\\\\"Id\\\\\\\":49,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"38\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Licensing Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":50,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"39\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Media Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":51,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"40\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Mental Health\\\\\\\"},{\\\\\\\"Id\\\\\\\":52,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"41\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Military Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":53,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"42\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Personal Injury\\\\\\\"},{\\\\\\\"Id\\\\\\\":54,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"43\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Prison Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":55,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"44\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Probate\\\\\\\"},{\\\\\\\"Id\\\\\\\":56,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"45\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Professional Negligence\\\\\\\"},{\\\\\\\"Id\\\\\\\":57,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"46\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Public Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":58,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"47\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Residential Conveyancing\\\\\\\"},{\\\\\\\"Id\\\\\\\":59,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"48\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Sports Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":60,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"49\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Tax Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":61,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"50\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Trusts\\\\\\\"},{\\\\\\\"Id\\\\\\\":62,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"51\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Welfare Benefits\\\\\\\"},{\\\\\\\"Id\\\\\\\":63,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"52\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Wills\\\\\\\"},{\\\\\\\"Id\\\\\\\":64,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Agriculture Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Agriculture Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":65,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Aviation Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Aviation Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":66,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Border & Customs\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Border & Customs\\\\\\\"},{\\\\\\\"Id\\\\\\\":67,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Charities Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Charities Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":68,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Children Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Children Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":69,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Civil Litigation\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Civil Litigation\\\\\\\"},{\\\\\\\"Id\\\\\\\":70,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Claims Against Public Authorities\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Claims Against Public Authorities\\\\\\\"},{\\\\\\\"Id\\\\\\\":71,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Clinical Negligence\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Clinical Negligence\\\\\\\"},{\\\\\\\"Id\\\\\\\":72,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Commercial Conveyancing\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Conveyancing\\\\\\\"},{\\\\\\\"Id\\\\\\\":73,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Commercial Leases\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Leases\\\\\\\"},{\\\\\\\"Id\\\\\\\":74,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Commercial Litigation\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Litigation\\\\\\\"},{\\\\\\\"Id\\\\\\\":75,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Community Care\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Community Care\\\\\\\"},{\\\\\\\"Id\\\\\\\":76,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Company & Commercial\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Company & Commercial\\\\\\\"},{\\\\\\\"Id\\\\\\\":77,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Consumer Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Consumer Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":78,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Contract Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Contract Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":79,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Court of Protection\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Court of Protection\\\\\\\"},{\\\\\\\"Id\\\\\\\":80,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Crime\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Crime\\\\\\\"},{\\\\\\\"Id\\\\\\\":81,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Debt\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Debt\\\\\\\"},{\\\\\\\"Id\\\\\\\":82,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Debt Recovery\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Debt Recovery\\\\\\\"},{\\\\\\\"Id\\\\\\\":83,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Dental Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Dental Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":84,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Discrimination\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Discrimination\\\\\\\"},{\\\\\\\"Id\\\\\\\":85,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Dispute Resolution\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Dispute Resolution\\\\\\\"},{\\\\\\\"Id\\\\\\\":86,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Education Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Education Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":87,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Employment Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Employment Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":88,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Environment Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Environment Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":89,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Family Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Family Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":90,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Family Mediation\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Family Mediation\\\\\\\"},{\\\\\\\"Id\\\\\\\":91,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Food Safety & Hygiene\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Food Safety & Hygiene\\\\\\\"},{\\\\\\\"Id\\\\\\\":92,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Football Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Football Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":93,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Healthcare Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Healthcare Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":94,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Holiday Illness\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Holiday Illness\\\\\\\"},{\\\\\\\"Id\\\\\\\":95,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Housing Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Housing Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":96,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Immigration & Asylum Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Immigration & Asylum Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":97,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Intellectual Property\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Intellectual Property\\\\\\\"},{\\\\\\\"Id\\\\\\\":98,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Landlord & Tenant – Commercial\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Landlord & Tenant – Commercial\\\\\\\"},{\\\\\\\"Id\\\\\\\":99,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Landlord & Tenant – Residential\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Landlord & Tenant – Residential\\\\\\\"},{\\\\\\\"Id\\\\\\\":100,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Lasting Power of Attorney\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Lasting Power of Attorney\\\\\\\"},{\\\\\\\"Id\\\\\\\":101,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Licensing Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Licensing Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":102,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Media Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Media Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":103,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Mental Health\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Mental Health\\\\\\\"},{\\\\\\\"Id\\\\\\\":104,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Military Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Military Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":105,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Personal Injury\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Personal Injury\\\\\\\"},{\\\\\\\"Id\\\\\\\":106,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Prison Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Prison Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":107,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Probate\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Probate\\\\\\\"},{\\\\\\\"Id\\\\\\\":108,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Professional Negligence\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Professional Negligence\\\\\\\"},{\\\\\\\"Id\\\\\\\":109,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Public Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Public Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":110,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Residential Conveyancing\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Residential Conveyancing\\\\\\\"},{\\\\\\\"Id\\\\\\\":111,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Sports Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Sports Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":112,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Tax Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Tax Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":113,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Trusts\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Trusts\\\\\\\"},{\\\\\\\"Id\\\\\\\":114,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Welfare Benefits\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Welfare Benefits\\\\\\\"},{\\\\\\\"Id\\\\\\\":115,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":4,\\\\\\\"Key\\\\\\\":\\\\\\\"Wills\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Wills\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":5,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":13,\\\\\\\"Name\\\\\\\":\\\\\\\"DG Law Areas of Law July 2022\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"DG Law Areas of Law July 2022\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"c3bebca6-264a-468e-bd71-46242106e5e2\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":116,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Agriculture Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Agriculture Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":117,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Aviation Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Aviation Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":118,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Border & Customs\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Border & Customs\\\\\\\"},{\\\\\\\"Id\\\\\\\":119,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Charities Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Charities Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":120,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Children Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Children Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":121,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Civil Litigation\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Civil Litigation\\\\\\\"},{\\\\\\\"Id\\\\\\\":122,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Claims Against Public Authorities\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Claims Against Public Authorities\\\\\\\"},{\\\\\\\"Id\\\\\\\":123,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Clinical Negligence\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Clinical Negligence\\\\\\\"},{\\\\\\\"Id\\\\\\\":124,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Commercial Conveyancing\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Conveyancing\\\\\\\"},{\\\\\\\"Id\\\\\\\":125,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Commercial Leases\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Leases\\\\\\\"},{\\\\\\\"Id\\\\\\\":126,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Commercial Litigation\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Litigation\\\\\\\"},{\\\\\\\"Id\\\\\\\":127,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Community Care\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Community Care\\\\\\\"},{\\\\\\\"Id\\\\\\\":128,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Company & Commercial\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Company & Commercial\\\\\\\"},{\\\\\\\"Id\\\\\\\":129,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Consumer Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Consumer Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":130,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Contract Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Contract Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":131,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Court of Protection\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Court of Protection\\\\\\\"},{\\\\\\\"Id\\\\\\\":132,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Crime\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Crime\\\\\\\"},{\\\\\\\"Id\\\\\\\":133,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Debt\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Debt\\\\\\\"},{\\\\\\\"Id\\\\\\\":134,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Debt Recovery\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Debt Recovery\\\\\\\"},{\\\\\\\"Id\\\\\\\":135,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Dental Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Dental Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":136,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Discrimination\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Discrimination\\\\\\\"},{\\\\\\\"Id\\\\\\\":137,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Dispute Resolution\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Dispute Resolution\\\\\\\"},{\\\\\\\"Id\\\\\\\":138,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Education Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Education Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":139,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Employment Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Employment Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":140,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Environment Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Environment Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":141,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Family Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Family Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":142,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Family Mediation\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Family Mediation\\\\\\\"},{\\\\\\\"Id\\\\\\\":143,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Food Safety & Hygiene\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Food Safety & Hygiene\\\\\\\"},{\\\\\\\"Id\\\\\\\":144,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Football Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Football Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":145,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Healthcare Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Healthcare Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":146,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Holiday Illness\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Holiday Illness\\\\\\\"},{\\\\\\\"Id\\\\\\\":147,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Housing Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Housing Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":148,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Immigration & Asylum Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Immigration & Asylum Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":149,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Intellectual Property\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Intellectual Property\\\\\\\"},{\\\\\\\"Id\\\\\\\":150,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Landlord & Tenant – Commercial\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Landlord & Tenant – Commercial\\\\\\\"},{\\\\\\\"Id\\\\\\\":151,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Landlord & Tenant – Residential\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Landlord & Tenant – Residential\\\\\\\"},{\\\\\\\"Id\\\\\\\":152,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Lasting Power of Attorney\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Lasting Power of Attorney\\\\\\\"},{\\\\\\\"Id\\\\\\\":153,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Licensing Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Licensing Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":154,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Media Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Media Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":155,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Mental Health\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Mental Health\\\\\\\"},{\\\\\\\"Id\\\\\\\":156,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Military Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Military Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":157,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Personal Injury\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Personal Injury\\\\\\\"},{\\\\\\\"Id\\\\\\\":158,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Prison Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Prison Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":159,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Probate\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Probate\\\\\\\"},{\\\\\\\"Id\\\\\\\":160,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Professional Negligence\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Professional Negligence\\\\\\\"},{\\\\\\\"Id\\\\\\\":161,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Public Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Public Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":162,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Residential Conveyancing\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Residential Conveyancing\\\\\\\"},{\\\\\\\"Id\\\\\\\":163,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Sports Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Sports Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":164,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Tax Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Tax Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":165,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Trusts\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Trusts\\\\\\\"},{\\\\\\\"Id\\\\\\\":166,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Welfare Benefits\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Welfare Benefits\\\\\\\"},{\\\\\\\"Id\\\\\\\":167,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Wills\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Wills\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":5,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":13,\\\\\\\"Name\\\\\\\":\\\\\\\"DG Law Areas of Law July 2022\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"DG Law Areas of Law July 2022\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"c3bebca6-264a-468e-bd71-46242106e5e2\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":116,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Agriculture Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Agriculture Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":117,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Aviation Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Aviation Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":118,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Border & Customs\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Border & Customs\\\\\\\"},{\\\\\\\"Id\\\\\\\":119,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Charities Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Charities Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":120,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Children Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Children Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":121,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Civil Litigation\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Civil Litigation\\\\\\\"},{\\\\\\\"Id\\\\\\\":122,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Claims Against Public Authorities\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Claims Against Public Authorities\\\\\\\"},{\\\\\\\"Id\\\\\\\":123,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Clinical Negligence\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Clinical Negligence\\\\\\\"},{\\\\\\\"Id\\\\\\\":124,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Commercial Conveyancing\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Conveyancing\\\\\\\"},{\\\\\\\"Id\\\\\\\":125,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Commercial Leases\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Leases\\\\\\\"},{\\\\\\\"Id\\\\\\\":126,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Commercial Litigation\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Litigation\\\\\\\"},{\\\\\\\"Id\\\\\\\":127,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Community Care\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Community Care\\\\\\\"},{\\\\\\\"Id\\\\\\\":128,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Company & Commercial\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Company & Commercial\\\\\\\"},{\\\\\\\"Id\\\\\\\":129,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Consumer Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Consumer Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":130,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Contract Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Contract Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":131,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Court of Protection\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Court of Protection\\\\\\\"},{\\\\\\\"Id\\\\\\\":132,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Crime\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Crime\\\\\\\"},{\\\\\\\"Id\\\\\\\":133,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Debt\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Debt\\\\\\\"},{\\\\\\\"Id\\\\\\\":134,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Debt Recovery\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Debt Recovery\\\\\\\"},{\\\\\\\"Id\\\\\\\":135,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Dental Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Dental Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":136,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Discrimination\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Discrimination\\\\\\\"},{\\\\\\\"Id\\\\\\\":137,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Dispute Resolution\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Dispute Resolution\\\\\\\"},{\\\\\\\"Id\\\\\\\":138,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Education Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Education Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":139,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Employment Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Employment Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":140,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Environment Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Environment Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":141,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Family Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Family Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":142,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Family Mediation\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Family Mediation\\\\\\\"},{\\\\\\\"Id\\\\\\\":143,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Food Safety & Hygiene\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Food Safety & Hygiene\\\\\\\"},{\\\\\\\"Id\\\\\\\":144,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Football Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Football Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":145,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Healthcare Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Healthcare Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":146,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Holiday Illness\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Holiday Illness\\\\\\\"},{\\\\\\\"Id\\\\\\\":147,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Housing Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Housing Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":148,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Immigration & Asylum Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Immigration & Asylum Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":149,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Intellectual Property\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Intellectual Property\\\\\\\"},{\\\\\\\"Id\\\\\\\":150,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Landlord & Tenant – Commercial\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Landlord & Tenant – Commercial\\\\\\\"},{\\\\\\\"Id\\\\\\\":151,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Landlord & Tenant – Residential\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Landlord & Tenant – Residential\\\\\\\"},{\\\\\\\"Id\\\\\\\":152,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Lasting Power of Attorney\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Lasting Power of Attorney\\\\\\\"},{\\\\\\\"Id\\\\\\\":153,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Licensing Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Licensing Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":154,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Media Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Media Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":155,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Mental Health\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Mental Health\\\\\\\"},{\\\\\\\"Id\\\\\\\":156,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Military Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Military Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":157,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Personal Injury\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Personal Injury\\\\\\\"},{\\\\\\\"Id\\\\\\\":158,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Prison Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Prison Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":159,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Probate\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Probate\\\\\\\"},{\\\\\\\"Id\\\\\\\":160,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Professional Negligence\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Professional Negligence\\\\\\\"},{\\\\\\\"Id\\\\\\\":161,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Public Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Public Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":162,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Residential Conveyancing\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Residential Conveyancing\\\\\\\"},{\\\\\\\"Id\\\\\\\":163,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Sports Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Sports Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":164,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Tax Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Tax Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":165,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Trusts\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Trusts\\\\\\\"},{\\\\\\\"Id\\\\\\\":166,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Welfare Benefits\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Welfare Benefits\\\\\\\"},{\\\\\\\"Id\\\\\\\":167,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Wills\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Wills\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":5,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":13,\\\\\\\"Name\\\\\\\":\\\\\\\"DG Law Areas of Law July 2022\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"DG Law Areas of Law July 2022\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"c3bebca6-264a-468e-bd71-46242106e5e2\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":116,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Agriculture Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Agriculture Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":117,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Aviation Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Aviation Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":118,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Border & Customs\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Border & Customs\\\\\\\"},{\\\\\\\"Id\\\\\\\":119,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Charities Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Charities Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":120,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Children Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Children Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":121,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Civil Litigation\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Civil Litigation\\\\\\\"},{\\\\\\\"Id\\\\\\\":122,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Claims Against Public Authorities\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Claims Against Public Authorities\\\\\\\"},{\\\\\\\"Id\\\\\\\":123,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Clinical Negligence\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Clinical Negligence\\\\\\\"},{\\\\\\\"Id\\\\\\\":124,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Commercial Conveyancing\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Conveyancing\\\\\\\"},{\\\\\\\"Id\\\\\\\":125,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Commercial Leases\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Leases\\\\\\\"},{\\\\\\\"Id\\\\\\\":126,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Commercial Litigation\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Commercial Litigation\\\\\\\"},{\\\\\\\"Id\\\\\\\":127,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Community Care\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Community Care\\\\\\\"},{\\\\\\\"Id\\\\\\\":128,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Company & Commercial\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Company & Commercial\\\\\\\"},{\\\\\\\"Id\\\\\\\":129,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Consumer Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Consumer Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":130,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Contract Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Contract Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":131,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Court of Protection\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Court of Protection\\\\\\\"},{\\\\\\\"Id\\\\\\\":132,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Crime\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Crime\\\\\\\"},{\\\\\\\"Id\\\\\\\":133,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Debt\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Debt\\\\\\\"},{\\\\\\\"Id\\\\\\\":134,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Debt Recovery\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Debt Recovery\\\\\\\"},{\\\\\\\"Id\\\\\\\":135,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Dental Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Dental Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":136,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Discrimination\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Discrimination\\\\\\\"},{\\\\\\\"Id\\\\\\\":137,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Dispute Resolution\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Dispute Resolution\\\\\\\"},{\\\\\\\"Id\\\\\\\":138,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Education Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Education Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":139,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Employment Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Employment Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":140,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Environment Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Environment Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":141,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Family Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Family Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":142,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Family Mediation\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Family Mediation\\\\\\\"},{\\\\\\\"Id\\\\\\\":143,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Food Safety & Hygiene\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Food Safety & Hygiene\\\\\\\"},{\\\\\\\"Id\\\\\\\":144,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Football Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Football Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":145,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Healthcare Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Healthcare Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":146,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Holiday Illness\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Holiday Illness\\\\\\\"},{\\\\\\\"Id\\\\\\\":147,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Housing Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Housing Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":148,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Immigration & Asylum Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Immigration & Asylum Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":149,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Intellectual Property\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Intellectual Property\\\\\\\"},{\\\\\\\"Id\\\\\\\":150,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Landlord & Tenant – Commercial\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Landlord & Tenant – Commercial\\\\\\\"},{\\\\\\\"Id\\\\\\\":151,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Landlord & Tenant – Residential\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Landlord & Tenant – Residential\\\\\\\"},{\\\\\\\"Id\\\\\\\":152,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Lasting Power of Attorney\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Lasting Power of Attorney\\\\\\\"},{\\\\\\\"Id\\\\\\\":153,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Licensing Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Licensing Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":154,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Media Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Media Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":155,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Mental Health\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Mental Health\\\\\\\"},{\\\\\\\"Id\\\\\\\":156,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Military Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Military Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":157,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Personal Injury\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Personal Injury\\\\\\\"},{\\\\\\\"Id\\\\\\\":158,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Prison Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Prison Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":159,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Probate\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Probate\\\\\\\"},{\\\\\\\"Id\\\\\\\":160,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Professional Negligence\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Professional Negligence\\\\\\\"},{\\\\\\\"Id\\\\\\\":161,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Public Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Public Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":162,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Residential Conveyancing\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Residential Conveyancing\\\\\\\"},{\\\\\\\"Id\\\\\\\":163,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Sports Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Sports Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":164,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Tax Law\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Tax Law\\\\\\\"},{\\\\\\\"Id\\\\\\\":165,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Trusts\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Trusts\\\\\\\"},{\\\\\\\"Id\\\\\\\":166,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Welfare Benefits\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Welfare Benefits\\\\\\\"},{\\\\\\\"Id\\\\\\\":167,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":5,\\\\\\\"Key\\\\\\\":\\\\\\\"Wills\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"Wills\\\\\\\"}]\\\"}]\",\"Pages\":\"4\"}","Expressions":"[]","Template":"{\"Id\":229,\"AcountId\":0,\"TemplateId\":1618,\"FileName\":\"DG Law QM Questionnaire Version 1 July 2022.docx\",\"Description\":\"To gather accurate information that assists manual drafting\",\"DisplayName\":\"QM Questionnaire\",\"DocumentOnlyAudienceId\":13,\"AllowEsign\":false,\"AllowCheckInOut\":true,\"eSignProvider\":\"\",\"eSignIntegrationKey\":\"\",\"eSignUserId\":\"\",\"eSignPassword\":\"\",\"eSignURL\":\"\",\"PropertyBag\":\"{\\\"Clon\\\":null,\\\"emailMoniker\\\":\\\"DG Law QM Questionnaire\\\",\\\"Released\\\":true,\\\"Culture\\\":\\\"en-US\\\",\\\"CultureName\\\":\\\"English (United States) - [en-US]\\\",\\\"AllowDocX\\\":true,\\\"AllowSendMail\\\":true,\\\"DocumentCreation\\\":true,\\\"DocumentDelete\\\":false,\\\"DocumentShare\\\":false,\\\"TemplateEdit\\\":false,\\\"TemplateShare\\\":false,\\\"TemplateDelete\\\":false,\\\"DefaultDescription\\\":\\\"Enter Firm Name Here\\\",\\\"TemplateRemove\\\":false,\\\"UseServiceAccount\\\":true}\",\"Category\":\"DG Law\",\"DisplayNameToolTip\":\"Use this when seeking responses from clients before draft a Quality Manual\",\"TemplateContent\":\"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jw9DBY+Zj8uGDYbrnjg+OTniP3L96fynQ89kzyaeF/6i/suuFxYvfvjV69fO0ZjRoZfyl5O/bXyl/erA6xmv28bCxh6+yXgzMV70VvvtwXfcdx3vo98PT+R8IH8o/2j5sfVT0Kf7kxmTk/8EA5jz/GMzLdsAAKXNaVRYdFhNTDpjb20uYWRvYmUueG1wAAAAAAA8P3hwYWNrZXQgYmVnaW49Iu+7vyIgaWQ9Ilc1TTBNcENlaGlIenJlU3pOVGN6a2M5ZCI/Pgo8eDp4bXBtZXRhIHhtbG5zOng9ImFkb2JlOm5zOm1ldGEvIiB4OnhtcHRrPSJBZG9iZSBYTVAgQ29yZSA1LjUtYzAyMSA3OS4xNTQ5MTEsIDIwMTMvMTAvMjktMTE6NDc6MTYgICAgICAgICI+CiAgIDxyZGY6UkRGIHhtbG5zOnJkZj0iaHR0cDovL3d3dy53My5vcmcvMTk5OS8wMi8yMi1yZGYtc3ludGF4LW5zIyI+CiAgICAgIDxyZGY6RGVzY3JpcHRpb24gcmRmOmFib3V0PSIiCiAgICAgICAgICAgIHhtbG5zOmRjPSJodHRwOi8vcHVybC5vcmcvZGMvZWxlbWVudHMvMS4xLyIKICAgICAgICAgICAgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIgogICAgICAgICAgICB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIKICAgICAgICAgICAgeG1sbnM6c3RFdnQ9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZUV2ZW50IyIKICAgICAgICAgICAgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiCiAgICAgICAgICAgIHhtbG5zOmlsbHVzdHJhdG9yPSJodHRwOi8vbnMuYWRvYmUuY29tL2lsbHVzdHJhdG9yLzEuMC8iCiAgICAgICAgICAgIHhtbG5zOnhtcFRQZz0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3QvcGcvIgogICAgICAgICAgICB4bWxuczpzdERpbT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL0RpbWVuc2lvbnMjIgogICAgICAgICAgICB4bWxuczp4bXBHPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvZy8iCiAgICAgICAgICAgIHhtbG5zOnBkZj0iaHR0cDovL25zLmFkb2JlLmNvbS9wZGYvMS4zLyIKICAgICAgICAgICAgeG1sbnM6cGhvdG9zaG9wPSJodHRwOi8vbnMuYWRvYmUuY29tL3Bob3Rvc2hvcC8xLjAvIgogICAgICAgICAgICB4bWxuczp0aWZmPSJodHRwOi8vbnMuYWRvYmUuY29tL3RpZmYvMS4wLyIKICAgICAgICAgICAgeG1sbnM6ZXhpZj0iaHR0cDovL25zLmFkb2JlLmNvbS9leGlmLzEuMC8iPgogICAgICAgICA8ZGM6Zm9ybWF0PmltYWdlL3BuZzwvZGM6Zm9ybWF0PgogICAgICAgICA8ZGM6dGl0bGU+CiAgICAgICAgICAgIDxyZGY6QWx0PgogICAgICAgICAgICAgICA8cmRmOmxpIHhtbDpsYW5nPSJ4LWRlZmF1bHQiPlByaW50PC9yZGY6bGk+CiAgICAgICAgICAgIDwvcmRmOkFsdD4KICAgICAgICAgPC9kYzp0aXRsZT4KICAgICAgICAgPHhtcDpDcmVhdG9yVG9vbD5BZG9iZSBQaG90b3Nob3AgQ0MgKFdpbmRvd3MpPC94bXA6Q3JlYXRvclRvb2w+CiAgICAgICAgIDx4bXA6Q3JlYXRlRGF0ZT4yMDEzLTA3LTEwVDA5OjU4OjM1KzAxOjAwPC94bXA6Q3JlYXRlRGF0ZT4KICAgICAgICAgPHhtcDpNb2RpZnlEYXRlPjIwMTQtMDQtMjNUMTU6NDA6NTMrMDE6MDA8L3htcDpNb2RpZnlEYXRlPgogICAgICAgICA8eG1wOk1ldGFkYXRhRGF0ZT4yMDE0LTA0LTIzVDE1OjQwOjUzKzAxOjAwPC94bXA6TWV0YWRhdGFEYXRlPgogICAgICAgICA8eG1wTU06UmVuZGl0aW9uQ2xhc3M+cHJvb2Y6cGRmPC94bXBNTTpSZW5kaXRpb25DbGFzcz4KICAgICAgICAgPHhtcE1NOk9yaWdpbmFsRG9jdW1lbnRJRD51dWlkOjVEMjA4OTI0OTNCRkRCMTE5MTRBODU5MEQzMTUwOEM4PC94bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ+CiAgICAgICAgIDx4bXBNTTpEb2N1bWVudElEPnhtcC5kaWQ6Rjc3RjExNzQwNzIwNjgxMThBNkRCNzAwMDRFQ0JFMzQ8L3htcE1NOkRvY3VtZW50SUQ+CiAgICAgICAgIDx4bXBNTTpJbnN0YW5jZUlEPnhtcC5paWQ6YmUwMWU5YTQtMDBhMS00YjQ1LWJkMzQtMjg3M2MxYjY0OWRiPC94bXBNTTpJbnN0YW5jZUlEPgogICAgICAgICA8eG1wTU06SGlzdG9yeT4KICAgICAgICAgICAgPHJkZjpTZXE+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmNvbnZlcnRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6cGFyYW1zPmZyb20gYXBwbGljYXRpb24vcGRmIHRvICZsdDt1bmtub3duJmd0Ozwvc3RFdnQ6cGFyYW1zPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpEMjdGMTE3NDA3MjA2ODExOTEwOTlDM0I2MDFDNDU0ODwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAwOC0wNC0xN1QxNDoxOToxNSswNTozMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgSWxsdXN0cmF0b3IgQ1M0PC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgICAgICAgPHJkZjpCYWc+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZGY6bGk+LzwvcmRmOmxpPgogICAgICAgICAgICAgICAgICAgICA8L3JkZjpCYWc+CiAgICAgICAgICAgICAgICAgIDwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmNvbnZlcnRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6cGFyYW1zPmZyb20gYXBwbGljYXRpb24vcGRmIHRvICZsdDt1bmtub3duJmd0Ozwvc3RFdnQ6cGFyYW1zPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+Y29udmVydGVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpwYXJhbXM+ZnJvbSBhcHBsaWNhdGlvbi9wZGYgdG8gJmx0O3Vua25vd24mZ3Q7PC9zdEV2dDpwYXJhbXM+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOkY5N0YxMTc0MDcyMDY4MTE4RDRFRDI0NkIzQURCMUM2PC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDA4LTA1LTE1VDE2OjIzOjA2LTA3OjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBJbGx1c3RyYXRvciBDUzQ8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICAgICAgICA8cmRmOkJhZz4KICAgICAgICAgICAgICAgICAgICAgICAgPHJkZjpsaT4vPC9yZGY6bGk+CiAgICAgICAgICAgICAgICAgICAgIDwvcmRmOkJhZz4KICAgICAgICAgICAgICAgICAgPC9zdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpGQTdGMTE3NDA3MjA2ODExOEQ0RUQyNDZCM0FEQjFDNjwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAwOC0wNS0xNVQxNzoxMDo0NS0wNzowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgSWxsdXN0cmF0b3IgQ1M0PC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgICAgICAgPHJkZjpCYWc+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZGY6bGk+LzwvcmRmOmxpPgogICAgICAgICAgICAgICAgICAgICA8L3JkZjpCYWc+CiAgICAgICAgICAgICAgICAgIDwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6RUY3RjExNzQwNzIwNjgxMUE0NkNBNDUxOUQyNDM1NkI8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMDgtMDUtMTVUMjI6NTM6MzMtMDc6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIElsbHVzdHJhdG9yIENTNDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgICAgICAgIDxyZGY6QmFnPgogICAgICAgICAgICAgICAgICAgICAgICA8cmRmOmxpPi88L3JkZjpsaT4KICAgICAgICAgICAgICAgICAgICAgPC9yZGY6QmFnPgogICAgICAgICAgICAgICAgICA8L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOkYwN0YxMTc0MDcyMDY4MTFBNDZDQTQ1MTlEMjQzNTZCPC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDA4LTA1LTE1VDIzOjA3OjA3LTA3OjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBJbGx1c3RyYXRvciBDUzQ8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICAgICAgICA8cmRmOkJhZz4KICAgICAgICAgICAgICAgICAgICAgICAgPHJkZjpsaT4vPC9yZGY6bGk+CiAgICAgICAgICAgICAgICAgICAgIDwvcmRmOkJhZz4KICAgICAgICAgICAgICAgICAgPC9zdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpGNzdGMTE3NDA3MjA2ODExQkREREZEMzhEMENGMjRERDwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAwOC0wNS0xNlQxMDozNTo0My0wNzowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgSWxsdXN0cmF0b3IgQ1M0PC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgICAgICAgPHJkZjpCYWc+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZGY6bGk+LzwvcmRmOmxpPgogICAgICAgICAgICAgICAgICAgICA8L3JkZjpCYWc+CiAgICAgICAgICAgICAgICAgIDwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmNvbnZlcnRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6cGFyYW1zPmZyb20gYXBwbGljYXRpb24vcGRmIHRvICZsdDt1bmtub3duJmd0Ozwvc3RFdnQ6cGFyYW1zPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpGOTdGMTE3NDA3MjA2ODExQkREREZEMzhEMENGMjRERDwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAwOC0wNS0xNlQxMDo0MDo1OS0wNzowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgSWxsdXN0cmF0b3IgQ1M0PC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgICAgICAgPHJkZjpCYWc+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZGY6bGk+LzwvcmRmOmxpPgogICAgICAgICAgICAgICAgICAgICA8L3JkZjpCYWc+CiAgICAgICAgICAgICAgICAgIDwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmNvbnZlcnRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6cGFyYW1zPmZyb20gYXBwbGljYXRpb24vdm5kLmFkb2JlLmlsbHVzdHJhdG9yIHRvICZsdDt1bmtub3duJmd0Ozwvc3RFdnQ6cGFyYW1zPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpGQTdGMTE3NDA3MjA2ODExQkREREZEMzhEMENGMjRERDwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAwOC0wNS0xNlQxMToyNjo1NS0wNzowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgSWxsdXN0cmF0b3IgQ1M0PC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgICAgICAgPHJkZjpCYWc+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZGY6bGk+LzwvcmRmOmxpPgogICAgICAgICAgICAgICAgICAgICA8L3JkZjpCYWc+CiAgICAgICAgICAgICAgICAgIDwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6RkI3RjExNzQwNzIwNjgxMUJERERGRDM4RDBDRjI0REQ8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMDgtMDUtMTZUMTE6Mjk6MDEtMDc6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIElsbHVzdHJhdG9yIENTNDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgICAgICAgIDxyZGY6QmFnPgogICAgICAgICAgICAgICAgICAgICAgICA8cmRmOmxpPi88L3JkZjpsaT4KICAgICAgICAgICAgICAgICAgICAgPC9yZGY6QmFnPgogICAgICAgICAgICAgICAgICA8L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOkZDN0YxMTc0MDcyMDY4MTFCRERERkQzOEQwQ0YyNEREPC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDA4LTA1LTE2VDExOjI5OjIwLTA3OjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBJbGx1c3RyYXRvciBDUzQ8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICAgICAgICA8cmRmOkJhZz4KICAgICAgICAgICAgICAgICAgICAgICAgPHJkZjpsaT4vPC9yZGY6bGk+CiAgICAgICAgICAgICAgICAgICAgIDwvcmRmOkJhZz4KICAgICAgICAgICAgICAgICAgPC9zdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpGRDdGMTE3NDA3MjA2ODExQkREREZEMzhEMENGMjRERDwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAwOC0wNS0xNlQxMTozMDo1NC0wNzowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgSWxsdXN0cmF0b3IgQ1M0PC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgICAgICAgPHJkZjpCYWc+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZGY6bGk+LzwvcmRmOmxpPgogICAgICAgICAgICAgICAgICAgICA8L3JkZjpCYWc+CiAgICAgICAgICAgICAgICAgIDwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6RkU3RjExNzQwNzIwNjgxMUJERERGRDM4RDBDRjI0REQ8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMDgtMDUtMTZUMTE6MzE6MjItMDc6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIElsbHVzdHJhdG9yIENTNDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgICAgICAgIDxyZGY6QmFnPgogICAgICAgICAgICAgICAgICAgICAgICA8cmRmOmxpPi88L3JkZjpsaT4KICAgICAgICAgICAgICAgICAgICAgPC9yZGY6QmFnPgogICAgICAgICAgICAgICAgICA8L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOkIyMzM2NjhDMTYyMDY4MTFCRERERkQzOEQwQ0YyNEREPC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDA4LTA1LTE2VDEyOjIzOjQ2LTA3OjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBJbGx1c3RyYXRvciBDUzQ8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICAgICAgICA8cmRmOkJhZz4KICAgICAgICAgICAgICAgICAgICAgICAgPHJkZjpsaT4vPC9yZGY6bGk+CiAgICAgICAgICAgICAgICAgICAgIDwvcmRmOkJhZz4KICAgICAgICAgICAgICAgICAgPC9zdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpCMzMzNjY4QzE2MjA2ODExQkREREZEMzhEMENGMjRERDwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAwOC0wNS0xNlQxMzoyNzo1NC0wNzowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgSWxsdXN0cmF0b3IgQ1M0PC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgICAgICAgPHJkZjpCYWc+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZGY6bGk+LzwvcmRmOmxpPgogICAgICAgICAgICAgICAgICAgICA8L3JkZjpCYWc+CiAgICAgICAgICAgICAgICAgIDwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6QjQzMzY2OEMxNjIwNjgxMUJERERGRDM4RDBDRjI0REQ8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMDgtMDUtMTZUMTM6NDY6MTMtMDc6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIElsbHVzdHJhdG9yIENTNDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgICAgICAgIDxyZGY6QmFnPgogICAgICAgICAgICAgICAgICAgICAgICA8cmRmOmxpPi88L3JkZjpsaT4KICAgICAgICAgICAgICAgICAgICAgPC9yZGY6QmFnPgogICAgICAgICAgICAgICAgICA8L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOkY3N0YxMTc0MDcyMDY4MTE5N0MxQkYxNEQxNzU5RTgzPC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDA4LTA1LTE2VDE1OjQ3OjU3LTA3OjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBJbGx1c3RyYXRvciBDUzQ8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICAgICAgICA8cmRmOkJhZz4KICAgICAgICAgICAgICAgICAgICAgICAgPHJkZjpsaT4vPC9yZGY6bGk+CiAgICAgICAgICAgICAgICAgICAgIDwvcmRmOkJhZz4KICAgICAgICAgICAgICAgICAgPC9zdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpGODdGMTE3NDA3MjA2ODExOTdDMUJGMTREMTc1OUU4Mzwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAwOC0wNS0xNlQxNTo1MTowNi0wNzowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgSWxsdXN0cmF0b3IgQ1M0PC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgICAgICAgPHJkZjpCYWc+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZGY6bGk+LzwvcmRmOmxpPgogICAgICAgICAgICAgICAgICAgICA8L3JkZjpCYWc+CiAgICAgICAgICAgICAgICAgIDwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6Rjk3RjExNzQwNzIwNjgxMTk3QzFCRjE0RDE3NTlFODM8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMDgtMDUtMTZUMTU6NTI6MjItMDc6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIElsbHVzdHJhdG9yIENTNDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgICAgICAgIDxyZGY6QmFnPgogICAgICAgICAgICAgICAgICAgICAgICA8cmRmOmxpPi88L3JkZjpsaT4KICAgICAgICAgICAgICAgICAgICAgPC9yZGY6QmFnPgogICAgICAgICAgICAgICAgICA8L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5jb252ZXJ0ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnBhcmFtcz5mcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5pbGx1c3RyYXRvciB0byBhcHBsaWNhdGlvbi92bmQuYWRvYmUuaWxsdXN0cmF0b3I8L3N0RXZ0OnBhcmFtcz4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6RkE3RjExNzQwNzIwNjgxMUI2MjhFM0JGMjdDOEM0MUI8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMDgtMDUtMjJUMTM6Mjg6MDEtMDc6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIElsbHVzdHJhdG9yIENTNDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgICAgICAgIDxyZGY6QmFnPgogICAgICAgICAgICAgICAgICAgICAgICA8cmRmOmxpPi88L3JkZjpsaT4KICAgICAgICAgICAgICAgICAgICAgPC9yZGY6QmFnPgogICAgICAgICAgICAgICAgICA8L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5jb252ZXJ0ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnBhcmFtcz5mcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5pbGx1c3RyYXRvciB0byBhcHBsaWNhdGlvbi92bmQuYWRvYmUuaWxsdXN0cmF0b3I8L3N0RXZ0OnBhcmFtcz4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6RkY3RjExNzQwNzIwNjgxMUI2MjhFM0JGMjdDOEM0MUI8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMDgtMDUtMjJUMTY6MjM6NTMtMDc6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIElsbHVzdHJhdG9yIENTNDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgICAgICAgIDxyZGY6QmFnPgogICAgICAgICAgICAgICAgICAgICAgICA8cmRmOmxpPi88L3JkZjpsaT4KICAgICAgICAgICAgICAgICAgICAgPC9yZGY6QmFnPgogICAgICAgICAgICAgICAgICA8L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5jb252ZXJ0ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnBhcmFtcz5mcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5pbGx1c3RyYXRvciB0byBhcHBsaWNhdGlvbi92bmQuYWRvYmUuaWxsdXN0cmF0b3I8L3N0RXZ0OnBhcmFtcz4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6MDdDM0JEMjUxMDJEREQxMTgxQjU5NDA3MENFQjg4RDk8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMDgtMDUtMjhUMTY6NDU6MjYtMDc6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIElsbHVzdHJhdG9yIENTNDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgICAgICAgIDxyZGY6QmFnPgogICAgICAgICAgICAgICAgICAgICAgICA8cmRmOmxpPi88L3JkZjpsaT4KICAgICAgICAgICAgICAgICAgICAgPC9yZGY6QmFnPgogICAgICAgICAgICAgICAgICA8L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5jb252ZXJ0ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnBhcmFtcz5mcm9tIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5pbGx1c3RyYXRvciB0byBhcHBsaWNhdGlvbi92bmQuYWRvYmUuaWxsdXN0cmF0b3I8L3N0RXZ0OnBhcmFtcz4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6Rjg3RjExNzQwNzIwNjgxMTkwOThCMDk3RkRBMzlCRUY8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMDgtMDYtMDJUMTM6MjU6MjUtMDc6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIElsbHVzdHJhdG9yIENTNDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgICAgICAgIDxyZGY6QmFnPgogICAgICAgICAgICAgICAgICAgICAgICA8cmRmOmxpPi88L3JkZjpsaT4KICAgICAgICAgICAgICAgICAgICAgPC9yZGY6QmFnPgogICAgICAgICAgICAgICAgICA8L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOkY3N0YxMTc0MDcyMDY4MTFCQjFEQkY4RjI0MkI2Rjg0PC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDA4LTA2LTA5VDE0OjU4OjM2LTA3OjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBJbGx1c3RyYXRvciBDUzQ8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICAgICAgICA8cmRmOkJhZz4KICAgICAgICAgICAgICAgICAgICAgICAgPHJkZjpsaT4vPC9yZGY6bGk+CiAgICAgICAgICAgICAgICAgICAgIDwvcmRmOkJhZz4KICAgICAgICAgICAgICAgICAgPC9zdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpGOTdGMTE3NDA3MjA2ODExQUNBRkI4REE4MDg1NEU3Njwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAwOC0wNi0xMVQxNDozMToyNy0wNzowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgSWxsdXN0cmF0b3IgQ1M0PC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgICAgICAgPHJkZjpCYWc+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZGY6bGk+LzwvcmRmOmxpPgogICAgICAgICAgICAgICAgICAgICA8L3JkZjpCYWc+CiAgICAgICAgICAgICAgICAgIDwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6MDE4MDExNzQwNzIwNjgxMTgzNDM4M0NEM0E4RDIzMDM8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMDgtMDYtMTFUMjI6Mzc6MzUtMDc6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIElsbHVzdHJhdG9yIENTNDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgICAgICAgIDxyZGY6QmFnPgogICAgICAgICAgICAgICAgICAgICAgICA8cmRmOmxpPi88L3JkZjpsaT4KICAgICAgICAgICAgICAgICAgICAgPC9yZGY6QmFnPgogICAgICAgICAgICAgICAgICA8L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOjAxRTU0MDY2NEEzREREMTFCRDMzRDNFQjhEM0ExMDY4PC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDA4LTA2LTE4VDIyOjI0OjAxKzA3OjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBJbGx1c3RyYXRvciBDUzQ8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICAgICAgICA8cmRmOkJhZz4KICAgICAgICAgICAgICAgICAgICAgICAgPHJkZjpsaT4vPC9yZGY6bGk+CiAgICAgICAgICAgICAgICAgICAgIDwvcmRmOkJhZz4KICAgICAgICAgICAgICAgICAgPC9zdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDo2QjZBRTJBNTcyM0VERDExQTZGMUJBQkY3QzVBN0E1MTwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAwOC0wNi0xOVQyMDozMDozNC0wNzowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgSWxsdXN0cmF0b3IgQ1M0PC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgICAgICAgPHJkZjpCYWc+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZGY6bGk+LzwvcmRmOmxpPgogICAgICAgICAgICAgICAgICAgICA8L3JkZjpCYWc+CiAgICAgICAgICAgICAgICAgIDwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6MEI5RkVEMzUyMDBBMTE2ODlGRThDQjlFQTg1QzU0NTk8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMDgtMDYtMjZUMDY6MDc6NDItMDc6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIElsbHVzdHJhdG9yIENTNDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgICAgICAgIDxyZGY6QmFnPgogICAgICAgICAgICAgICAgICAgICAgICA8cmRmOmxpPi88L3JkZjpsaT4KICAgICAgICAgICAgICAgICAgICAgPC9yZGY6QmFnPgogICAgICAgICAgICAgICAgICA8L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOjAzODAxMTc0MDcyMDY4MTE5MTA5QzI0NDA5N0U2MkUxPC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDEzLTAzLTA1VDEzOjEwOjU5Wjwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgSWxsdXN0cmF0b3IgQ1M0PC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6Y2hhbmdlZD4vPC9zdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDowNDgwMTE3NDA3MjA2ODExOTEwOUMyNDQwOTdFNjJFMTwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAxMy0wMy0wNVQxMzoxMjoxOFo8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIElsbHVzdHJhdG9yIENTNDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+Lzwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmNvbnZlcnRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6cGFyYW1ldGVycz5mcm9tIGFwcGxpY2F0aW9uL3Bvc3RzY3JpcHQgdG8gYXBwbGljYXRpb24vdm5kLmFkb2JlLmlsbHVzdHJhdG9yPC9zdEV2dDpwYXJhbWV0ZXJzPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDowNTgwMTE3NDA3MjA2ODExOTEwOUMyNDQwOTdFNjJFMTwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAxMy0wMy0wNVQxNToyMzoxM1o8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIElsbHVzdHJhdG9yIENTNDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+Lzwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPnNhdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDppbnN0YW5jZUlEPnhtcC5paWQ6MDY4MDExNzQwNzIwNjgxMTkxMDlDMjQ0MDk3RTYyRTE8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMTMtMDMtMDVUMTU6MzA6MTFaPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBJbGx1c3RyYXRvciBDUzQ8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpjaGFuZ2VkPi88L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5jb252ZXJ0ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnBhcmFtZXRlcnM+ZnJvbSBhcHBsaWNhdGlvbi9wb3N0c2NyaXB0IHRvIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5pbGx1c3RyYXRvcjwvc3RFdnQ6cGFyYW1ldGVycz4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmNvbnZlcnRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6cGFyYW1ldGVycz5mcm9tIGFwcGxpY2F0aW9uL3Bvc3RzY3JpcHQgdG8gYXBwbGljYXRpb24vdm5kLmFkb2JlLmlsbHVzdHJhdG9yPC9zdEV2dDpwYXJhbWV0ZXJzPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDowMzgwMTE3NDA3MjA2ODExOTJCMEMyN0VBNDMxMEQ0Nzwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAxMy0wMy0wNlQxNTo1NTozNlo8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIElsbHVzdHJhdG9yIENTNDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+Lzwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmNvbnZlcnRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6cGFyYW1ldGVycz5mcm9tIGFwcGxpY2F0aW9uL3Bvc3RzY3JpcHQgdG8gYXBwbGljYXRpb24vdm5kLmFkb2JlLmlsbHVzdHJhdG9yPC9zdEV2dDpwYXJhbWV0ZXJzPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDowMTgwMTE3NDA3MjA2ODExOTJCMEQyNkVCNUEyQTM0Njwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAxMy0wNy0xMFQwOTo1Njo1OCswMTowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgSWxsdXN0cmF0b3IgQ1M0PC9zdEV2dDpzb2Z0d2FyZUFnZW50PgogICAgICAgICAgICAgICAgICA8c3RFdnQ6Y2hhbmdlZD4vPC9zdEV2dDpjaGFuZ2VkPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+Y29udmVydGVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpwYXJhbWV0ZXJzPmZyb20gYXBwbGljYXRpb24vcG9zdHNjcmlwdCB0byBhcHBsaWNhdGlvbi92bmQuYWRvYmUuaWxsdXN0cmF0b3I8L3N0RXZ0OnBhcmFtZXRlcnM+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOjA0ODAxMTc0MDcyMDY4MTE5MkIwRDI2RUI1QTJBMzQ2PC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDEzLTA3LTEwVDA5OjU4OjM1KzAxOjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBJbGx1c3RyYXRvciBDUzQ8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpjaGFuZ2VkPi88L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5jb252ZXJ0ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnBhcmFtZXRlcnM+ZnJvbSBhcHBsaWNhdGlvbi9wb3N0c2NyaXB0IHRvIGFwcGxpY2F0aW9uL3ZuZC5hZG9iZS5waG90b3Nob3A8L3N0RXZ0OnBhcmFtZXRlcnM+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5zYXZlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6aW5zdGFuY2VJRD54bXAuaWlkOkY3N0YxMTc0MDcyMDY4MTE4QTZEQjcwMDA0RUNCRTM0PC9zdEV2dDppbnN0YW5jZUlEPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6d2hlbj4yMDEzLTA3LTExVDA5OjAwOjQyKzAxOjAwPC9zdEV2dDp3aGVuPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6c29mdHdhcmVBZ2VudD5BZG9iZSBQaG90b3Nob3AgQ1M0IE1hY2ludG9zaDwvc3RFdnQ6c29mdHdhcmVBZ2VudD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmNoYW5nZWQ+Lzwvc3RFdnQ6Y2hhbmdlZD4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmNvbnZlcnRlZDwvc3RFdnQ6YWN0aW9uPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6cGFyYW1ldGVycz5mcm9tIGFwcGxpY2F0aW9uL3Bvc3RzY3JpcHQgdG8gaW1hZ2UvanBlZzwvc3RFdnQ6cGFyYW1ldGVycz4KICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8c3RFdnQ6YWN0aW9uPmRlcml2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnBhcmFtZXRlcnM+Y29udmVydGVkIGZyb20gYXBwbGljYXRpb24vdm5kLmFkb2JlLnBob3Rvc2hvcCB0byBpbWFnZS9qcGVnPC9zdEV2dDpwYXJhbWV0ZXJzPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpGODdGMTE3NDA3MjA2ODExOEE2REI3MDAwNEVDQkUzNDwvc3RFdnQ6aW5zdGFuY2VJRD4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OndoZW4+MjAxMy0wNy0xMVQwOTowMDo0MiswMTowMDwvc3RFdnQ6d2hlbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OnNvZnR3YXJlQWdlbnQ+QWRvYmUgUGhvdG9zaG9wIENTNCBNYWNpbnRvc2g8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpjaGFuZ2VkPi88L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0OmFjdGlvbj5kZXJpdmVkPC9zdEV2dDphY3Rpb24+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpwYXJhbWV0ZXJzPmNvbnZlcnRlZCBmcm9tIGltYWdlL2pwZWcgdG8gaW1hZ2UvcG5nPC9zdEV2dDpwYXJhbWV0ZXJzPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDphY3Rpb24+c2F2ZWQ8L3N0RXZ0OmFjdGlvbj4KICAgICAgICAgICAgICAgICAgPHN0RXZ0Omluc3RhbmNlSUQ+eG1wLmlpZDpiZTAxZTlhNC0wMGExLTRiNDUtYmQzNC0yODczYzFiNjQ5ZGI8L3N0RXZ0Omluc3RhbmNlSUQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDp3aGVuPjIwMTQtMDQtMjNUMTU6NDA6NTMrMDE6MDA8L3N0RXZ0OndoZW4+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpzb2Z0d2FyZUFnZW50PkFkb2JlIFBob3Rvc2hvcCBDQyAoV2luZG93cyk8L3N0RXZ0OnNvZnR3YXJlQWdlbnQ+CiAgICAgICAgICAgICAgICAgIDxzdEV2dDpjaGFuZ2VkPi88L3N0RXZ0OmNoYW5nZWQ+CiAgICAgICAgICAgICAgIDwvcmRmOmxpPgogICAgICAgICAgICA8L3JkZjpTZXE+CiAgICAgICAgIDwveG1wTU06SGlzdG9yeT4KICAgICAgICAgPHhtcE1NOkRlcml2ZWRGcm9tIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgPHN0UmVmOmluc3RhbmNlSUQ+eG1wLmlpZDpGODdGMTE3NDA3MjA2ODExOEE2REI3MDAwNEVDQkUzNDwvc3RSZWY6aW5zdGFuY2VJRD4KICAgICAgICAgICAgPHN0UmVmOmRvY3VtZW50SUQ+eG1wLmRpZDpGNzdGMTE3NDA3MjA2ODExOEE2REI3MDAwNEVDQkUzNDwvc3RSZWY6ZG9jdW1lbnRJRD4KICAgICAgICAgICAgPHN0UmVmOm9yaWdpbmFsRG9jdW1lbnRJRD51dWlkOjVEMjA4OTI0OTNCRkRCMTE5MTRBODU5MEQzMTUwOEM4PC9zdFJlZjpvcmlnaW5hbERvY3VtZW50SUQ+CiAgICAgICAgICAgIDxzdFJlZjpyZW5kaXRpb25DbGFzcz5wcm9vZjpwZGY8L3N0UmVmOnJlbmRpdGlvbkNsYXNzPgogICAgICAgICA8L3htcE1NOkRlcml2ZWRGcm9tPgogICAgICAgICA8aWxsdXN0cmF0b3I6U3RhcnR1cFByb2ZpbGU+UHJpbnQ8L2lsbHVzdHJhdG9yOlN0YXJ0dXBQcm9maWxlPgogICAgICAgICA8eG1wVFBnOk5QYWdlcz4xPC94bXBUUGc6TlBhZ2VzPgogICAgICAgICA8eG1wVFBnOkhhc1Zpc2libGVUcmFuc3BhcmVuY3k+RmFsc2U8L3htcFRQZzpIYXNWaXNpYmxlVHJhbnNwYXJlbmN5PgogICAgICAgICA8eG1wVFBnOkhhc1Zpc2libGVPdmVycHJpbnQ+RmFsc2U8L3htcFRQZzpIYXNWaXNpYmxlT3ZlcnByaW50PgogICAgICAgICA8eG1wVFBnOk1heFBhZ2VTaXplIHJkZjpwYXJzZVR5cGU9IlJlc291cmNlIj4KICAgICAgICAgICAgPHN0RGltOnc+NDE5Ljk5OTUxNDwvc3REaW06dz4KICAgICAgICAgICAgPHN0RGltOmg+Mjk2Ljk5OTk1OTwvc3REaW06aD4KICAgICAgICAgICAgPHN0RGltOnVuaXQ+TWlsbGltZXRlcnM8L3N0RGltOnVuaXQ+CiAgICAgICAgIDwveG1wVFBnOk1heFBhZ2VTaXplPgogICAgICAgICA8eG1wVFBnOlBsYXRlTmFtZXM+CiAgICAgICAgICAgIDxyZGY6U2VxPgogICAgICAgICAgICAgICA8cmRmOmxpPkJsYWNrPC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGk+UEFOVE9ORSAzMTI1IEM8L3JkZjpsaT4KICAgICAgICAgICAgPC9yZGY6U2VxPgogICAgICAgICA8L3htcFRQZzpQbGF0ZU5hbWVzPgogICAgICAgICA8eG1wVFBnOlN3YXRjaEdyb3Vwcz4KICAgICAgICAgICAgPHJkZjpTZXE+CiAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICA8eG1wRzpncm91cE5hbWU+RGVmYXVsdCBTd2F0Y2ggR3JvdXA8L3htcEc6Z3JvdXBOYW1lPgogICAgICAgICAgICAgICAgICA8eG1wRzpncm91cFR5cGU+MDwveG1wRzpncm91cFR5cGU+CiAgICAgICAgICAgICAgICAgIDx4bXBHOkNvbG9yYW50cz4KICAgICAgICAgICAgICAgICAgICAgPHJkZjpTZXE+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8eG1wRzpzd2F0Y2hOYW1lPldoaXRlPC94bXBHOnN3YXRjaE5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4bXBHOm1vZGU+Q01ZSzwveG1wRzptb2RlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8eG1wRzp0eXBlPlBST0NFU1M8L3htcEc6dHlwZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhtcEc6Y3lhbj4wLjAwMDAwMDwveG1wRzpjeWFuPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8eG1wRzptYWdlbnRhPjAuMDAwMDAwPC94bXBHOm1hZ2VudGE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4bXBHOnllbGxvdz4wLjAwMDAwMDwveG1wRzp5ZWxsb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4bXBHOmJsYWNrPjAuMDAwMDAwPC94bXBHOmJsYWNrPgogICAgICAgICAgICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgICAgICAgICAgPHJkZjpsaSByZGY6cGFyc2VUeXBlPSJSZXNvdXJjZSI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4bXBHOnN3YXRjaE5hbWU+QmxhY2s8L3htcEc6c3dhdGNoTmFtZT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhtcEc6bW9kZT5DTVlLPC94bXBHOm1vZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4bXBHOnR5cGU+UFJPQ0VTUzwveG1wRzp0eXBlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8eG1wRzpjeWFuPjAuMDAwMDAwPC94bXBHOmN5YW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4bXBHOm1hZ2VudGE+MC4wMDAwMDA8L3htcEc6bWFnZW50YT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhtcEc6eWVsbG93PjAuMDAwMDAwPC94bXBHOnllbGxvdz4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhtcEc6YmxhY2s+MTAwLjAwMDAwMDwveG1wRzpibGFjaz4KICAgICAgICAgICAgICAgICAgICAgICAgPC9yZGY6bGk+CiAgICAgICAgICAgICAgICAgICAgICAgIDxyZGY6bGkgcmRmOnBhcnNlVHlwZT0iUmVzb3VyY2UiPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8eG1wRzpzd2F0Y2hOYW1lPlBBTlRPTkUgMzEyNSBDPC94bXBHOnN3YXRjaE5hbWU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4bXBHOnR5cGU+U1BPVDwveG1wRzp0eXBlPgogICAgICAgICAgICAgICAgICAgICAgICAgICA8eG1wRzp0aW50PjEwMC4wMDAwMDA8L3htcEc6dGludD4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhtcEc6bW9kZT5DTVlLPC94bXBHOm1vZGU+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4bXBHOmN5YW4+ODMuMDAwMDAwPC94bXBHOmN5YW4+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4bXBHOm1hZ2VudGE+MC4wMDAwMDA8L3htcEc6bWFnZW50YT4KICAgICAgICAgICAgICAgICAgICAgICAgICAgPHhtcEc6eWVsbG93PjIxLjAwMDAwMDwveG1wRzp5ZWxsb3c+CiAgICAgICAgICAgICAgICAgICAgICAgICAgIDx4bXBHOmJsYWNrPjAuMDAwMDAwPC94bXBHOmJsYWNrPgogICAgICAgICAgICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgICAgICAgICAgPC9yZGY6U2VxPgogICAgICAgICAgICAgICAgICA8L3htcEc6Q29sb3JhbnRzPgogICAgICAgICAgICAgICA8L3JkZjpsaT4KICAgICAgICAgICAgPC9yZGY6U2VxPgogICAgICAgICA8L3htcFRQZzpTd2F0Y2hHcm91cHM+CiAgICAgICAgIDxwZGY6UHJvZHVjZXI+QWRvYmUgUERGIGxpYnJhcnkgOS4wMDwvcGRmOlByb2R1Y2VyPgogICAgICAgICA8cGhvdG9zaG9wOkxlZ2FjeUlQVENEaWdlc3Q+RDcwQTUwMTVCRjBDMkIwNUZBQkUzQzVFMDhENDgxMDE8L3Bob3Rvc2hvcDpMZWdhY3lJUFRDRGlnZXN0PgogICAgICAgICA8cGhvdG9zaG9wOkNvbG9yTW9kZT4zPC9waG90b3Nob3A6Q29sb3JNb2RlPgogICAgICAgICA8cGhvdG9zaG9wOklDQ1Byb2ZpbGU+c1JHQiBJRUM2MTk2Ni0yLjE8L3Bob3Rvc2hvcDpJQ0NQcm9maWxlPgogICAgICAgICA8dGlmZjpJbWFnZVdpZHRoPjI3MTc8L3RpZmY6SW1hZ2VXaWR0aD4KICAgICAgICAgPHRpZmY6SW1hZ2VMZW5ndGg+NzA0PC90aWZmOkltYWdlTGVuZ3RoPgogICAgICAgICA8dGlmZjpCaXRzUGVyU2FtcGxlPgogICAgICAgICAgICA8cmRmOlNlcT4KICAgICAgICAgICAgICAgPHJkZjpsaT44PC9yZGY6bGk+CiAgICAgICAgICAgICAgIDxyZGY6bGk+ODwvcmRmOmxpPgogICAgICAgICAgICAgICA8cmRmOmxpPjg8L3JkZjpsaT4KICAgICAgICAgICAgPC9yZGY6U2VxPgogICAgICAgICA8L3RpZmY6Qml0c1BlclNhbXBsZT4KICAgICAgICAgPHRpZmY6UGhvdG9tZXRyaWNJbnRlcnByZXRhdGlvbj4yPC90aWZmOlBob3RvbWV0cmljSW50ZXJwcmV0YXRpb24+CiAgICAgICAgIDx0aWZmOk9yaWVudGF0aW9uPjE8L3RpZmY6T3JpZW50YXRpb24+CiAgICAgICAgIDx0aWZmOlNhbXBsZXNQZXJQaXhlbD4zPC90aWZmOlNhbXBsZXNQZXJQaXhlbD4KICAgICAgICAgPHRpZmY6WFJlc29sdXRpb24+MzAwMDAwMC8xMDAwMDwvdGlmZjpYUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6WVJlc29sdXRpb24+MzAwMDAwMC8xMDAwMDwvdGlmZjpZUmVzb2x1dGlvbj4KICAgICAgICAgPHRpZmY6UmVzb2x1dGlvblVuaXQ+MjwvdGlmZjpSZXNvbHV0aW9uVW5pdD4KICAgICAgICAgPGV4aWY6RXhpZlZlcnNpb24+MDIyMTwvZXhpZjpFeGlmVmVyc2lvbj4KICAgICAgICAgPGV4aWY6Q29sb3JTcGFjZT4xPC9leGlmOkNvbG9yU3BhY2U+CiAgICAgICAgIDxleGlmOlBpeGVsWERpbWVuc2lvbj40MDA8L2V4aWY6UGl4ZWxYRGltZW5zaW9uPgogICAgICAgICA8ZXhpZjpQaXhlbFlEaW1lbnNpb24+MTA0PC9leGlmOlBpeGVsWURpbWVuc2lvbj4KICAgICAgPC9yZGY6RGVzY3JpcHRpb24+CiAgIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCjw/eHBhY2tldCBlbmQ9InciPz6Q0o1tAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1MAAA6mAAADqYAAAXb5JfxUYAAD8KSURBVHja7F13eFTF1z5z7/aesumdJCR0gkAQQu+9KFJEEUXAiooUUUSKFBVBEQVEwB+gUpQmoEiTIjX0QArpySa7KdvbLfP9sRgjhJBsNiR+3Pd5fB7Z3Dt37pyZ955z5pwzCGMMjQDX9OYzWkOqxZFldWRa7DdNNsyygEHII1soxJESUYRM2Fwm7u6vCpeKgAMHDo8lUMMSVnKZaVOW9mSJ4UqZCSwOAACSAD4JIgFCCAAww4LdCTQLLAsIEXJxJy9Z7wCv5yL8ouRiTn4cOHCEVe+wMOyuHO3qDM0FrR7sTuDzQcQHkkDV3oUBgGLA7gSGBaloYKDXtOigwSE+nBQ5cOAIq15gZtjVt/M+Ty3UlpuAJEAsRDwCatkFjAAoBqwOQKipn/K9+NDnogI4WXLgwBGWJ7H+jubDa9kanRHEAhALUF37DpjFYHUARXcI8f2wVeTAIG9Oohw4cIRVV5wvM824mHEyVwcCHkhFyIMPRYAxgNEKCI2MDvyyfUyQSMDJlQMHjrDcAQPwzqWMVTdzwUmDSoqQi2A8/h4I0wwYrRK5+KM2kTPiQjnRcuDAEVYtFaty8/hTKRmaMpCLkZAPbD1rcwhhmwMsjt7RgZu6NAsW8jkBc+DAEVaNsOJ2/jvn04BhQSFBj8xThhDGGMotCqVkXae4Z0J9ORlz4MARVnUwsezzp279cjsfZEIkEtS7YnU/CITNdqCYNxOiVrZtwomZAweOsKrGRYNl5NHreVo9eMsQQUBDBaYihCkaDNak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\",\"AllowDocumentUpdate\":true,\"AllowNotification\":true,\"EmailMoniker\":null,\"OwnerFullName\":\"Karl Chapman\",\"OwnerDisplayName\":\"Karl Chapman (QM Questionnaire)\",\"OwnerUserName\":\"karl.chapman@kimtechnologies.com\",\"CoOwner\":false,\"CreateDocument\":true,\"AudienceName\":\"UK Sales Team\",\"IsSubForm\":false,\"ActiveSubscription\":true,\"SubscriptionStatusMessage\":\"\",\"IsDocusign\":false,\"isClixsignature\":null,\"Billing\":false}","Protected":false,"AppName":"https://uk.kim.ai","Version":"1.0"}