{"FileName":"Legal 200 Survey KIM DOCUMENT Form 1 August 2022.docx_1676_2022-08-28 14:54:12.txt","Id":1676,"Title":"Legal 200 Survey KIM DOCUMENT Form 1 August 2022.docx","Description":"To gather consistent data","Pages":"","Revision":"","Author":"karl.chapman@kimtechnologies.com","Keywords":"","Created":"","LastSave":"","Exported":"8/28/2022 2:54:12 PM","Lists":"{\"TemplateId\":\"1676\",\"Layout\":\"[{\\\"Id\\\":\\\"SectionHeader1\\\",\\\"Label\\\":\\\"Legal IT Insider Top 200 Technology Survey\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":4,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":0,\\\"i\\\":\\\"SectionHeader1\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":2,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#FB9E00\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Paragraph1\\\",\\\"Label\\\":\\\"Paragraph1\\\",\\\"Type\\\":12,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":4,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":1,\\\"i\\\":\\\"Paragraph1\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"Please select the technologies that are currently implemented and in operation (select all that apply). If you use a system/solution that is not listed please add in the 'Other' field. If a section is not relevant select 'Not Applicable'. Thank you for participating.\\\",\\\"Children\\\":[],\\\"TabIndex\\\":3,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader2\\\",\\\"Label\\\":\\\"1. Practice Management\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":7,\\\"i\\\":\\\"SectionHeader2\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":8,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"PracticeMgtLst\\\",\\\"Label\\\":\\\"Practice Management System(s)\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":11,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":8,\\\"i\\\":\\\"PracticeMgtLst\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":9,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"PracticeMgtOther\\\",\\\"Label\\\":\\\"Other Practice Management System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":8,\\\"i\\\":\\\"PracticeMgtOther\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":10,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader3\\\",\\\"Label\\\":\\\"2. Document and Email Management System \\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":10,\\\"i\\\":\\\"SectionHeader3\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":12,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"DocandEmailLst\\\",\\\"Label\\\":\\\"Document and Email System(s)\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":12,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":11,\\\"i\\\":\\\"DocandEmailLst\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":13,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"DocandEmailOther\\\",\\\"Label\\\":\\\"Other Document and Email System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":11,\\\"i\\\":\\\"DocandEmailOther\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":14,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"LawFirmName\\\",\\\"Label\\\":\\\"Your Full Law Firm Name\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":400,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":4,\\\"i\\\":\\\"LawFirmName\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":4,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"DateofSubmission\\\",\\\"Label\\\":\\\"Date of Submission\\\",\\\"Type\\\":6,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":3,\\\"y\\\":4,\\\"i\\\":\\\"DateofSubmission\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":7,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"YourName\\\",\\\"Label\\\":\\\"Your Name\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":4,\\\"i\\\":\\\"YourName\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":5,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"YourRole\\\",\\\"Label\\\":\\\"Your Role\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":4,\\\"i\\\":\\\"YourRole\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":6,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader4\\\",\\\"Label\\\":\\\"3. Case Workflow BPM\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":13,\\\"i\\\":\\\"SectionHeader4\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":16,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"CaseWorkflowBPM\\\",\\\"Label\\\":\\\"Case Workflow BPM System(s)\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":13,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":14,\\\"i\\\":\\\"CaseWorkflowBPM\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":17,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"CaseWorkflowBPMOther\\\",\\\"Label\\\":\\\"Other Case Workflow BPM System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":14,\\\"i\\\":\\\"CaseWorkflowBPMOther\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":18,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader5\\\",\\\"Label\\\":\\\"4. Voice Technology\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":16,\\\"i\\\":\\\"SectionHeader5\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":19,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"VoiceTechnology\\\",\\\"Label\\\":\\\"Voice Technology\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":14,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":17,\\\"i\\\":\\\"VoiceTechnology\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":20,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"VoiceTechnologyOther\\\",\\\"Label\\\":\\\"Other Voice Technology System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":17,\\\"i\\\":\\\"VoiceTechnologyOther\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":21,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader6\\\",\\\"Label\\\":\\\"5. CRM and Marketing\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":19,\\\"i\\\":\\\"SectionHeader6\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":22,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"CRMandMarketing\\\",\\\"Label\\\":\\\"CRM and Marketing\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":15,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":20,\\\"i\\\":\\\"CRMandMarketing\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":23,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherCRMandMarketing\\\",\\\"Label\\\":\\\"Other CRM and Marketing System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":20,\\\"i\\\":\\\"OtherCRMandMarketing\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":24,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader7\\\",\\\"Label\\\":\\\"6. Cost Recovery and Print Management\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":22,\\\"i\\\":\\\"SectionHeader7\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":25,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"CostRecoveryPrintMgt\\\",\\\"Label\\\":\\\"Cost Recovery and Print Management\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":16,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":23,\\\"i\\\":\\\"CostRecoveryPrintMgt\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":26,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherCostRecoveryPrint\\\",\\\"Label\\\":\\\"Other Cost Recovery and Print Management System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":23,\\\"i\\\":\\\"OtherCostRecoveryPrint\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":27,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader8\\\",\\\"Label\\\":\\\"7. Document Automation and Assembly\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":25,\\\"i\\\":\\\"SectionHeader8\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":28,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"DocAutoAssembly\\\",\\\"Label\\\":\\\"Document Automation and Assembly\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":17,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":26,\\\"i\\\":\\\"DocAutoAssembly\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":29,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherDOcAutoAssembly\\\",\\\"Label\\\":\\\"Other Document Automation and Assembly System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":26,\\\"i\\\":\\\"OtherDOcAutoAssembly\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":30,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader9\\\",\\\"Label\\\":\\\"8. Automated Contract Review\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":28,\\\"i\\\":\\\"SectionHeader9\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":31,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"AutoContractReview\\\",\\\"Label\\\":\\\"Automated Contract Review\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":18,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":29,\\\"i\\\":\\\"AutoContractReview\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":33,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherAutoContractReview\\\",\\\"Label\\\":\\\"Other Automated Contract Review System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":29,\\\"i\\\":\\\"OtherAutoContractReview\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":34,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader10\\\",\\\"Label\\\":\\\"9. Knowledge Management\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":31,\\\"i\\\":\\\"SectionHeader10\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":35,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"KnowledgeMgt\\\",\\\"Label\\\":\\\"Knowledge Management\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":19,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":32,\\\"i\\\":\\\"KnowledgeMgt\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":36,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherKnowledgeMgt\\\",\\\"Label\\\":\\\"Other Knowledge Management System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":32,\\\"i\\\":\\\"OtherKnowledgeMgt\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":37,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader11\\\",\\\"Label\\\":\\\"10. Library Management\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":34,\\\"i\\\":\\\"SectionHeader11\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":38,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"LibraryMgt\\\",\\\"Label\\\":\\\"Library Management\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":20,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":35,\\\"i\\\":\\\"LibraryMgt\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":39,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherLibraryMgt\\\",\\\"Label\\\":\\\"Other Library Management System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":35,\\\"i\\\":\\\"OtherLibraryMgt\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":40,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader12\\\",\\\"Label\\\":\\\"11. Document Versioning / Production\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":37,\\\"i\\\":\\\"SectionHeader12\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":41,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"DocVersioningProd\\\",\\\"Label\\\":\\\"Document Versioning / Production\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":21,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":38,\\\"i\\\":\\\"DocVersioningProd\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":42,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherDocVersioningProd\\\",\\\"Label\\\":\\\"Other Document Versioning / Production System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":38,\\\"i\\\":\\\"OtherDocVersioningProd\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":43,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader13\\\",\\\"Label\\\":\\\"12. Transaction Management\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":40,\\\"i\\\":\\\"SectionHeader13\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":44,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"TransactionMgt\\\",\\\"Label\\\":\\\"Transaction Management\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":22,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":41,\\\"i\\\":\\\"TransactionMgt\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":45,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherTransactionMgt\\\",\\\"Label\\\":\\\"Other Transaction Management System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":41,\\\"i\\\":\\\"OtherTransactionMgt\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":46,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader14\\\",\\\"Label\\\":\\\"25% complete\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":3,\\\"y\\\":28,\\\"i\\\":\\\"SectionHeader14\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":32,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#FB9E00\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader15\\\",\\\"Label\\\":\\\"13. HR Software\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":43,\\\"i\\\":\\\"SectionHeader15\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":47,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"HRSoftware\\\",\\\"Label\\\":\\\"HR Software\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":23,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":44,\\\"i\\\":\\\"HRSoftware\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":48,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherHRSoftware\\\",\\\"Label\\\":\\\"Other HR Software System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":44,\\\"i\\\":\\\"OtherHRSoftware\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":49,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader16\\\",\\\"Label\\\":\\\"14. Risk and Compliance\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":46,\\\"i\\\":\\\"SectionHeader16\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":50,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"RiskandCompliance\\\",\\\"Label\\\":\\\"Risk and Compliance\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":24,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":47,\\\"i\\\":\\\"RiskandCompliance\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":51,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherRiskandCompliance\\\",\\\"Label\\\":\\\"Other Risk and Compliance System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":47,\\\"i\\\":\\\"OtherRiskandCompliance\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":52,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader17\\\",\\\"Label\\\":\\\"15. Cyber Security\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":49,\\\"i\\\":\\\"SectionHeader17\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":53,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"CyberSecurity\\\",\\\"Label\\\":\\\"Cyber Security\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":25,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":50,\\\"i\\\":\\\"CyberSecurity\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":54,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherCyberSecurity\\\",\\\"Label\\\":\\\"Other Cyber Security System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":50,\\\"i\\\":\\\"OtherCyberSecurity\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":55,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader18\\\",\\\"Label\\\":\\\"16. Email Security\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":52,\\\"i\\\":\\\"SectionHeader18\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":57,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader19\\\",\\\"Label\\\":\\\"50% complete\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":3,\\\"y\\\":50,\\\"i\\\":\\\"SectionHeader19\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":56,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#FB9E00\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"EmailSecurity\\\",\\\"Label\\\":\\\"Email Security\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":26,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":53,\\\"i\\\":\\\"EmailSecurity\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":58,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherEmailSecurity\\\",\\\"Label\\\":\\\"Other Email Security System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":53,\\\"i\\\":\\\"OtherEmailSecurity\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":59,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader20\\\",\\\"Label\\\":\\\"17. Time Recording / Invoicing\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":55,\\\"i\\\":\\\"SectionHeader20\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":60,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"TimeRecordingInvoicing\\\",\\\"Label\\\":\\\"Time Recording / Invoicing\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":27,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":56,\\\"i\\\":\\\"TimeRecordingInvoicing\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":61,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherTimeRecording\\\",\\\"Label\\\":\\\"Other Time Recording / Invoicing System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":56,\\\"i\\\":\\\"OtherTimeRecording\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":62,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader21\\\",\\\"Label\\\":\\\"18. Collaboration Extranets / Dealrooms\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":58,\\\"i\\\":\\\"SectionHeader21\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":63,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"CollaborationExtranets\\\",\\\"Label\\\":\\\"Collaboration Extranets / Dealrooms\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":28,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":59,\\\"i\\\":\\\"CollaborationExtranets\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":64,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherCollaboration\\\",\\\"Label\\\":\\\"Other Collaboration Extranet / Dealroom System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":59,\\\"i\\\":\\\"OtherCollaboration\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":65,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader22\\\",\\\"Label\\\":\\\"Let's go!\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":3,\\\"y\\\":8,\\\"i\\\":\\\"SectionHeader22\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":11,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#FB9E00\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader23\\\",\\\"Label\\\":\\\"7% complete\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":3,\\\"y\\\":11,\\\"i\\\":\\\"SectionHeader23\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":15,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#FB9E00\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader24\\\",\\\"Label\\\":\\\"19. Low Code / No Code\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":61,\\\"i\\\":\\\"SectionHeader24\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":66,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"LowCodeNoCode\\\",\\\"Label\\\":\\\"Low Code / No Code\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":29,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":62,\\\"i\\\":\\\"LowCodeNoCode\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":67,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherLowCodeNoCode\\\",\\\"Label\\\":\\\"Other Low Code / No Code\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":62,\\\"i\\\":\\\"OtherLowCodeNoCode\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":68,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader25\\\",\\\"Label\\\":\\\"20. Matter Pricing / Planning System(s)\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":64,\\\"i\\\":\\\"SectionHeader25\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":69,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"MatterPricingPlanning\\\",\\\"Label\\\":\\\"Matter Pricing / Planning\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":30,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":65,\\\"i\\\":\\\"MatterPricingPlanning\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":70,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherMatterPricingPlanning\\\",\\\"Label\\\":\\\"Other Matter Pricing / Planning System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":65,\\\"i\\\":\\\"OtherMatterPricingPlanning\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":71,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader26\\\",\\\"Label\\\":\\\"21. BI\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":67,\\\"i\\\":\\\"SectionHeader26\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":72,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"BI\\\",\\\"Label\\\":\\\"BI\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":31,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":68,\\\"i\\\":\\\"BI\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":73,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherBI\\\",\\\"Label\\\":\\\"Other BI System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":68,\\\"i\\\":\\\"OtherBI\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":74,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader27\\\",\\\"Label\\\":\\\"22. Information Governance\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":70,\\\"i\\\":\\\"SectionHeader27\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":76,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"InfoGovernance\\\",\\\"Label\\\":\\\"Information Governance\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":32,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":71,\\\"i\\\":\\\"InfoGovernance\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":77,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherInfoGovernance\\\",\\\"Label\\\":\\\"Other Information Governance System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":71,\\\"i\\\":\\\"OtherInfoGovernance\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":78,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader28\\\",\\\"Label\\\":\\\"75% complete\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":3,\\\"y\\\":68,\\\"i\\\":\\\"SectionHeader28\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":75,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#FB9E00\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader29\\\",\\\"Label\\\":\\\"23. Litigation Analytics \\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":73,\\\"i\\\":\\\"SectionHeader29\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":79,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"LitigationAnalytics\\\",\\\"Label\\\":\\\"Litigation Analytics\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":33,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":74,\\\"i\\\":\\\"LitigationAnalytics\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":80,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherLitigationAnalytics\\\",\\\"Label\\\":\\\"Other Litigation Analytics\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":74,\\\"i\\\":\\\"OtherLitigationAnalytics\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":81,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader30\\\",\\\"Label\\\":\\\"24. Task Delegation\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":76,\\\"i\\\":\\\"SectionHeader30\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":82,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"TaskDelegation\\\",\\\"Label\\\":\\\"Task Delegation\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":34,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":77,\\\"i\\\":\\\"TaskDelegation\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":83,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherTaskDelegation\\\",\\\"Label\\\":\\\"Other Task Delegation System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":77,\\\"i\\\":\\\"OtherTaskDelegation\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":84,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader31\\\",\\\"Label\\\":\\\"25. eDiscovery\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":79,\\\"i\\\":\\\"SectionHeader31\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":85,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"eDiscovery\\\",\\\"Label\\\":\\\"eDiscovery\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":35,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":80,\\\"i\\\":\\\"eDiscovery\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":86,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OthereDiscovery\\\",\\\"Label\\\":\\\"Other eDiscovery System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":80,\\\"i\\\":\\\"OthereDiscovery\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":87,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader32\\\",\\\"Label\\\":\\\"26. Strategic Management\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":82,\\\"i\\\":\\\"SectionHeader32\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":88,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"StrategicManagement\\\",\\\"Label\\\":\\\"Strategic Management\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":36,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":83,\\\"i\\\":\\\"StrategicManagement\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":89,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherStrategicManagement\\\",\\\"Label\\\":\\\"Other Strategic Management System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":83,\\\"i\\\":\\\"OtherStrategicManagement\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":90,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader33\\\",\\\"Label\\\":\\\"27. Data Integration / Management\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":85,\\\"i\\\":\\\"SectionHeader33\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":91,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"DataIntegration\\\",\\\"Label\\\":\\\"Data Integration\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":37,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":86,\\\"i\\\":\\\"DataIntegration\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":92,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OtherDataIntegration\\\",\\\"Label\\\":\\\"Other Data Integration System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":86,\\\"i\\\":\\\"OtherDataIntegration\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":93,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader34\\\",\\\"Label\\\":\\\"28. eSignature\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":88,\\\"i\\\":\\\"SectionHeader34\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":94,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"eSignature\\\",\\\"Label\\\":\\\"eSignature\\\",\\\"Type\\\":4,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":38,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":true,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":89,\\\"i\\\":\\\"eSignature\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":95,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"OthereSignature\\\",\\\"Label\\\":\\\"Other eSignature System(s)\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":250,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":1,\\\"y\\\":89,\\\"i\\\":\\\"OthereSignature\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":96,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader35\\\",\\\"Label\\\":\\\"End - now 'Submit'\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":1,\\\"h\\\":1,\\\"x\\\":3,\\\"y\\\":89,\\\"i\\\":\\\"SectionHeader35\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":97,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#FB9E00\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Paragraph2\\\",\\\"Label\\\":\\\"Paragraph2\\\",\\\"Type\\\":12,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":4,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":91,\\\"i\\\":\\\"Paragraph2\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"Thank you for completing the survey. Please see below an optional 'Legal Tech Temperature Check'. If you can answer some or all of these we will appreciate it. \\\",\\\"Children\\\":[],\\\"TabIndex\\\":98,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#FB9E00\\\",\\\"FontSize\\\":22,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"TechStack\\\",\\\"Label\\\":\\\"1.\\\\tHow do you rate your firm’s overall technology stack?\\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Very strong,Strong,Satisfactory,Requires attention\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":95,\\\"i\\\":\\\"TechStack\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":100,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"TechCompetitive\\\",\\\"Label\\\":\\\"2.\\\\tWhen comparing your firm with other firms, how do you rate your technology competitive position?\\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Top quartile,Second quartile,Third quartile,Bottom quartile\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":95,\\\"i\\\":\\\"TechCompetitive\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":101,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Bugdet\\\",\\\"Label\\\":\\\"3.\\\\tLooking at the next 12 months which phrase best describes your technology budget?\\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"+10%,+5%,Unchanged,-5%,-10%\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":97,\\\"i\\\":\\\"Bugdet\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":102,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"PrimaryFactor\\\",\\\"Label\\\":\\\"4. What is the primary factor that prevents you rolling out technology effectively in your firm?\\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Lack of budget,Lack of Implementation resource,Lack of skilled technical resource,Lawyer behaviours,Management commitment,Time,None of the Above\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":97,\\\"i\\\":\\\"PrimaryFactor\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":103,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"TechProviders\\\",\\\"Label\\\":\\\"5. Overall, how do you rate technology providers implementation and support services?\\\",\\\"Type\\\":3,\\\"ItemList\\\":\\\"Very good, Good, Satisfactory,Poor,Very poor\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":0,\\\"y\\\":99,\\\"i\\\":\\\"TechProviders\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":104,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"Change\\\",\\\"Label\\\":\\\"6. What is the one thing you want to change about the legal technology market?\\\",\\\"Type\\\":1,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":500,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":2,\\\"x\\\":2,\\\"y\\\":99,\\\"i\\\":\\\"Change\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":105,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#000000\\\",\\\"FontSize\\\":18,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader36\\\",\\\"Label\\\":\\\"Legal Technology Temperature Check - Sept 2022\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":3,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":94,\\\"i\\\":\\\"SectionHeader36\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":99,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#FB9E00\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true},{\\\"Id\\\":\\\"SectionHeader37\\\",\\\"Label\\\":\\\"Survey End - Now Submit\\\",\\\"Type\\\":10,\\\"ItemList\\\":\\\"\\\",\\\"ListId\\\":0,\\\"Validations\\\":{\\\"MaxLength\\\":150,\\\"Mask\\\":\\\"\\\",\\\"Required\\\":false,\\\"Regex\\\":\\\"\\\",\\\"DefaultValue\\\":\\\"\\\",\\\"ErrorMessage\\\":\\\"\\\"},\\\"Layout\\\":{\\\"w\\\":2,\\\"h\\\":1,\\\"x\\\":0,\\\"y\\\":101,\\\"i\\\":\\\"SectionHeader37\\\",\\\"moved\\\":false,\\\"static\\\":true},\\\"Page\\\":\\\"1\\\",\\\"TextParagraph\\\":\\\"\\\",\\\"Children\\\":[],\\\"TabIndex\\\":106,\\\"AdminOnly\\\":false,\\\"Tooltip\\\":\\\"\\\",\\\"TooltipUrl\\\":\\\"\\\",\\\"FontColor\\\":\\\"#FB9E00\\\",\\\"FontSize\\\":23,\\\"Align\\\":\\\"left\\\",\\\"ShowScrollbar\\\":true}]\",\"Lists\":\"[{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":11,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Practice Management Software\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Practice Management Software\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"9327e539-4ecf-4515-bd1b-6523e938da4d\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":480,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":481,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ADERANT EXPERT\\\\\\\"},{\\\\\\\"Id\\\\\\\":482,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ADERANT SIERRA\\\\\\\"},{\\\\\\\"Id\\\\\\\":483,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ADVANCED\\\\\\\"},{\\\\\\\"Id\\\\\\\":484,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":485,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CIVICA\\\\\\\"},{\\\\\\\"Id\\\\\\\":486,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ECLIPSE LEGAL SYSTEMS/THE ACCESS GROUP\\\\\\\"},{\\\\\\\"Id\\\\\\\":487,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"FULCRUM\\\\\\\"},{\\\\\\\"Id\\\\\\\":488,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEAP\\\\\\\"},{\\\\\\\"Id\\\\\\\":489,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXIS AXXIA\\\\\\\"},{\\\\\\\"Id\\\\\\\":490,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXISONE\\\\\\\"},{\\\\\\\"Id\\\\\\\":491,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LINETIME/PRACTICE EVOLVE\\\\\\\"},{\\\\\\\"Id\\\\\\\":492,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MILES 33\\\\\\\"},{\\\\\\\"Id\\\\\\\":493,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"14\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ORACLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":494,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"15\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PEPPERMINT TECHNOLOGY\\\\\\\"},{\\\\\\\"Id\\\\\\\":495,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"16\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SAP\\\\\\\"},{\\\\\\\"Id\\\\\\\":496,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"17\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SOLICITORS OWN SOFTWARE/PRACTICE EVOLVE\\\\\\\"},{\\\\\\\"Id\\\\\\\":497,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"18\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"THE ACCESS GROUP\\\\\\\"},{\\\\\\\"Id\\\\\\\":498,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"19\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"THOMSON REUTERS ELITE 3E\\\\\\\"},{\\\\\\\"Id\\\\\\\":499,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"20\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"THOMSON REUTERS ELITE ENTERPRISE\\\\\\\"},{\\\\\\\"Id\\\\\\\":500,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"21\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"THOMSON REUTERS ELITE ENVISION\\\\\\\"},{\\\\\\\"Id\\\\\\\":501,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"22\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TIKIT P4W\\\\\\\"},{\\\\\\\"Id\\\\\\\":502,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"23\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TIKIT P4W/ADVANCED\\\\\\\"},{\\\\\\\"Id\\\\\\\":503,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":11,\\\\\\\"Key\\\\\\\":\\\\\\\"24\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":12,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Document and Email Systems\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Document and Email Systems\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"2d1540bb-5183-4cb3-b434-72706bb2de8f\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":504,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":505,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":506,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CIVICA\\\\\\\"},{\\\\\\\"Id\\\\\\\":507,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DOCSCORP/LITERA\\\\\\\"},{\\\\\\\"Id\\\\\\\":508,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ECLIPSE PROCLAIM/THE ACCESS GROUP\\\\\\\"},{\\\\\\\"Id\\\\\\\":509,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ELITE ENVISION\\\\\\\"},{\\\\\\\"Id\\\\\\\":510,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"EPONA\\\\\\\"},{\\\\\\\"Id\\\\\\\":511,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"IMANAGE CLOUD\\\\\\\"},{\\\\\\\"Id\\\\\\\":512,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"IMANAGE WORK\\\\\\\"},{\\\\\\\"Id\\\\\\\":513,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INTAPP REPSTOR\\\\\\\"},{\\\\\\\"Id\\\\\\\":514,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MICROSOFT SHAREPOINT\\\\\\\"},{\\\\\\\"Id\\\\\\\":515,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NETDOCUMENTS\\\\\\\"},{\\\\\\\"Id\\\\\\\":516,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OPENTEXT\\\\\\\"},{\\\\\\\"Id\\\\\\\":517,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"14\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PEPPERMINT TECHNOLOGY\\\\\\\"},{\\\\\\\"Id\\\\\\\":518,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"15\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TESSIAN\\\\\\\"},{\\\\\\\"Id\\\\\\\":519,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"16\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TIKIT P4W/ADVANCED\\\\\\\"},{\\\\\\\"Id\\\\\\\":520,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"17\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TIMESLICE\\\\\\\"},{\\\\\\\"Id\\\\\\\":521,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"18\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ZERO\\\\\\\"},{\\\\\\\"Id\\\\\\\":522,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":12,\\\\\\\"Key\\\\\\\":\\\\\\\"19\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":13,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Case Workflow BPM\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Case Workflow BPM\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"83804bb5-d5ba-41aa-95b8-6b0c0eba16f6\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":523,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":524,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ACTIONSTEP\\\\\\\"},{\\\\\\\"Id\\\\\\\":525,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ADVANCED\\\\\\\"},{\\\\\\\"Id\\\\\\\":526,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"AUTOMATION OUTCOMES\\\\\\\"},{\\\\\\\"Id\\\\\\\":527,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":528,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BIGHAND\\\\\\\"},{\\\\\\\"Id\\\\\\\":529,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CLIO\\\\\\\"},{\\\\\\\"Id\\\\\\\":530,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ECLIPSE PROCLAIM/THE ACCESS GROUP\\\\\\\"},{\\\\\\\"Id\\\\\\\":531,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"EKNOW/NASSTAR\\\\\\\"},{\\\\\\\"Id\\\\\\\":532,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"FILEVINE\\\\\\\"},{\\\\\\\"Id\\\\\\\":533,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INTAPP FLOW\\\\\\\"},{\\\\\\\"Id\\\\\\\":534,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"KIM TECHNOLOGIES\\\\\\\"},{\\\\\\\"Id\\\\\\\":535,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEAP\\\\\\\"},{\\\\\\\"Id\\\\\\\":536,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"14\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXIS SOLCASE\\\\\\\"},{\\\\\\\"Id\\\\\\\":537,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"15\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXISNEXIS VISUALFILES\\\\\\\"},{\\\\\\\"Id\\\\\\\":538,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"16\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LINETIME/PRACTICE EVOLVE\\\\\\\"},{\\\\\\\"Id\\\\\\\":539,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"17\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OMNIA BPM\\\\\\\"},{\\\\\\\"Id\\\\\\\":540,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"18\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ONTRA\\\\\\\"},{\\\\\\\"Id\\\\\\\":541,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"19\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OPENTEXT BUSINESS PROCESS MANAGEMENT\\\\\\\"},{\\\\\\\"Id\\\\\\\":542,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"20\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OSPREY\\\\\\\"},{\\\\\\\"Id\\\\\\\":543,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"21\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PROSPEROWARE UMBRIA\\\\\\\"},{\\\\\\\"Id\\\\\\\":544,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"22\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SLICEDBREAD\\\\\\\"},{\\\\\\\"Id\\\\\\\":545,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"23\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SOS LEGAL/PRACTICE EVOLVE\\\\\\\"},{\\\\\\\"Id\\\\\\\":546,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"24\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"THOMSON REUTERS ELITE MATTERSPHERE\\\\\\\"},{\\\\\\\"Id\\\\\\\":547,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"25\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TIKIT P4W/ADVANCED\\\\\\\"},{\\\\\\\"Id\\\\\\\":548,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"26\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TOCA\\\\\\\"},{\\\\\\\"Id\\\\\\\":549,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":13,\\\\\\\"Key\\\\\\\":\\\\\\\"27\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":14,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Voice Technology\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Voice Technology\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"6fc3297f-b3cd-4419-8fc9-4a15fd15d278\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":550,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":14,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":551,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":14,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":552,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":14,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BIGHAND PROFESSIONAL\\\\\\\"},{\\\\\\\"Id\\\\\\\":553,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":14,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"GOOGLE CLOUD SPEECH TO TEXT\\\\\\\"},{\\\\\\\"Id\\\\\\\":554,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":14,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MICROSOFT AZURE SPEECH TO TEXT\\\\\\\"},{\\\\\\\"Id\\\\\\\":556,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":14,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NUANCE COMMUNICATIONS/MICROSOFT\\\\\\\"},{\\\\\\\"Id\\\\\\\":557,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":14,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PHILIPS SPEECHLIVE\\\\\\\"},{\\\\\\\"Id\\\\\\\":558,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":14,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SPEECHWRITE\\\\\\\"},{\\\\\\\"Id\\\\\\\":559,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":14,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"VOICE TECHNOLOGIES\\\\\\\"},{\\\\\\\"Id\\\\\\\":560,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":14,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":15,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"CRM and Marketing\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"CRM and Marketing\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"96eb64f4-e56f-466e-9886-989f9c7c7c3e\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":561,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":562,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ACTIONSTEP\\\\\\\"},{\\\\\\\"Id\\\\\\\":563,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ADVANCED\\\\\\\"},{\\\\\\\"Id\\\\\\\":564,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":565,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CLIO GROW\\\\\\\"},{\\\\\\\"Id\\\\\\\":566,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"COLLIER PICKARD\\\\\\\"},{\\\\\\\"Id\\\\\\\":567,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ELITE BUSINESS PREMIER DEVELOPMENT\\\\\\\"},{\\\\\\\"Id\\\\\\\":568,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ELITE CONTACTMANAGER\\\\\\\"},{\\\\\\\"Id\\\\\\\":569,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"HUBSPOT\\\\\\\"},{\\\\\\\"Id\\\\\\\":570,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INFOR\\\\\\\"},{\\\\\\\"Id\\\\\\\":571,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INTAPP ONEPLACE\\\\\\\"},{\\\\\\\"Id\\\\\\\":572,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INTROHIVE\\\\\\\"},{\\\\\\\"Id\\\\\\\":573,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LAW RULER\\\\\\\"},{\\\\\\\"Id\\\\\\\":574,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"14\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LAWMATICS\\\\\\\"},{\\\\\\\"Id\\\\\\\":575,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"15\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEGAL360\\\\\\\"},{\\\\\\\"Id\\\\\\\":576,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"16\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXISNEXIS INT+B3:C29ERACTION\\\\\\\"},{\\\\\\\"Id\\\\\\\":577,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"17\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MICROSOFT DYNAMICS\\\\\\\"},{\\\\\\\"Id\\\\\\\":578,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"18\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NEXL\\\\\\\"},{\\\\\\\"Id\\\\\\\":579,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"19\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PEPPERMINT TECHNOLOGY\\\\\\\"},{\\\\\\\"Id\\\\\\\":580,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"20\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PIPEDRIVE\\\\\\\"},{\\\\\\\"Id\\\\\\\":581,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"21\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"REDVIEW\\\\\\\"},{\\\\\\\"Id\\\\\\\":582,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"22\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SA.GLOBAL\\\\\\\"},{\\\\\\\"Id\\\\\\\":583,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"23\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SUGARCRM\\\\\\\"},{\\\\\\\"Id\\\\\\\":584,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"24\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SUREPOINT\\\\\\\"},{\\\\\\\"Id\\\\\\\":585,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"25\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TIKIT CONNECT/ADVANCED\\\\\\\"},{\\\\\\\"Id\\\\\\\":586,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"26\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"UPPER SIGMA\\\\\\\"},{\\\\\\\"Id\\\\\\\":587,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"27\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"VUTURE\\\\\\\"},{\\\\\\\"Id\\\\\\\":588,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":15,\\\\\\\"Key\\\\\\\":\\\\\\\"28\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":16,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Cost Recovery and Print Management\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Cost Recovery and Print Management\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"b9d75969-453c-4559-be74-6049c2a0d1a7\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":589,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":16,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":590,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":16,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ADERANT EXPERT\\\\\\\"},{\\\\\\\"Id\\\\\\\":591,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":16,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":592,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":16,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ENABLE REVENUE MANAGER/PINNACLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":593,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":16,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"KOFAX COPITRAK\\\\\\\"},{\\\\\\\"Id\\\\\\\":594,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":16,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXISNEXIS VISUALFILES\\\\\\\"},{\\\\\\\"Id\\\\\\\":595,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":16,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MINISOFT\\\\\\\"},{\\\\\\\"Id\\\\\\\":596,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":16,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NQUEUE BILLBACK\\\\\\\"},{\\\\\\\"Id\\\\\\\":597,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":16,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NUANCE EQUITRAC\\\\\\\"},{\\\\\\\"Id\\\\\\\":598,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":16,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PAPERCUT\\\\\\\"},{\\\\\\\"Id\\\\\\\":599,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":16,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PROACTIS\\\\\\\"},{\\\\\\\"Id\\\\\\\":600,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":16,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"RESEARCHMONITOR\\\\\\\"},{\\\\\\\"Id\\\\\\\":601,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":16,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":17,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Document Automation Assembly\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Document Automation Assembly\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"2c7ce1a2-da3d-4fef-bd7c-8ef7dd582531\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":602,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":603,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ABACUSNEXT\\\\\\\"},{\\\\\\\"Id\\\\\\\":604,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"AFTERPATTERN/NETDOCUMENTS\\\\\\\"},{\\\\\\\"Id\\\\\\\":605,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"AVOKAADO\\\\\\\"},{\\\\\\\"Id\\\\\\\":606,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"AVVOKA\\\\\\\"},{\\\\\\\"Id\\\\\\\":607,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":608,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CLARILIS\\\\\\\"},{\\\\\\\"Id\\\\\\\":609,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CLIO\\\\\\\"},{\\\\\\\"Id\\\\\\\":610,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CONTRACT EXPRESS/THOMSON REUTERS\\\\\\\"},{\\\\\\\"Id\\\\\\\":611,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CONTRACT MILL\\\\\\\"},{\\\\\\\"Id\\\\\\\":612,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DOCASSEMBLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":613,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DOCUMATE\\\\\\\"},{\\\\\\\"Id\\\\\\\":614,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ECLIPSE PROCLAIM\\\\\\\"},{\\\\\\\"Id\\\\\\\":615,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"14\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ELITE ENVISION\\\\\\\"},{\\\\\\\"Id\\\\\\\":616,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"15\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"EXARI/COUPA\\\\\\\"},{\\\\\\\"Id\\\\\\\":617,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"16\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"HOTDOCS/ABACUSNEXT\\\\\\\"},{\\\\\\\"Id\\\\\\\":618,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"17\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"JURIBLOX\\\\\\\"},{\\\\\\\"Id\\\\\\\":619,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"18\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"JURIDOC\\\\\\\"},{\\\\\\\"Id\\\\\\\":620,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"19\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"JURO\\\\\\\"},{\\\\\\\"Id\\\\\\\":621,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"20\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"KIM TECHNOLOGIES\\\\\\\"},{\\\\\\\"Id\\\\\\\":622,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"21\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"KNACKLY\\\\\\\"},{\\\\\\\"Id\\\\\\\":623,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"22\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LAWYAW\\\\\\\"},{\\\\\\\"Id\\\\\\\":624,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"23\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEGITO\\\\\\\"},{\\\\\\\"Id\\\\\\\":625,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"24\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXISDRAFT\\\\\\\"},{\\\\\\\"Id\\\\\\\":626,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"25\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXISNEXIS VISUALFILES\\\\\\\"},{\\\\\\\"Id\\\\\\\":627,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"26\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LINETIME/PRACTICE EVOLVE\\\\\\\"},{\\\\\\\"Id\\\\\\\":628,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"27\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LITERA CREATE\\\\\\\"},{\\\\\\\"Id\\\\\\\":629,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"28\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OYEZ FORMS\\\\\\\"},{\\\\\\\"Id\\\\\\\":630,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"29\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PRECISELY\\\\\\\"},{\\\\\\\"Id\\\\\\\":631,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"30\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PROSE\\\\\\\"},{\\\\\\\"Id\\\\\\\":632,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"31\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SMOKEBALL\\\\\\\"},{\\\\\\\"Id\\\\\\\":633,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"32\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SPRINGCM\\\\\\\"},{\\\\\\\"Id\\\\\\\":634,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"33\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SYSERO\\\\\\\"},{\\\\\\\"Id\\\\\\\":635,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"34\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TEMPLAFY\\\\\\\"},{\\\\\\\"Id\\\\\\\":636,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"35\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"THOMSON REUTERS ENVISION\\\\\\\"},{\\\\\\\"Id\\\\\\\":637,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"36\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"WOLTERS KLUWER CLAUSE ANALYTICS\\\\\\\"},{\\\\\\\"Id\\\\\\\":638,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":17,\\\\\\\"Key\\\\\\\":\\\\\\\"37\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER [PLEASE SPECIFY]\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":18,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Automated Contract Review\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Automated Contract Review\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"eb8d32cc-be92-4b6d-bfaa-0be1b18db343\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":639,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":18,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":640,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":18,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":641,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":18,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BLACKBOILER\\\\\\\"},{\\\\\\\"Id\\\\\\\":642,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":18,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DELLA\\\\\\\"},{\\\\\\\"Id\\\\\\\":643,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":18,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DILIGEN\\\\\\\"},{\\\\\\\"Id\\\\\\\":644,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":18,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"EIGEN TECHNOLOGIES\\\\\\\"},{\\\\\\\"Id\\\\\\\":645,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":18,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"JURO\\\\\\\"},{\\\\\\\"Id\\\\\\\":646,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":18,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"KIRA SYSTEMS/LITERA\\\\\\\"},{\\\\\\\"Id\\\\\\\":647,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":18,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LAWGEEX\\\\\\\"},{\\\\\\\"Id\\\\\\\":648,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":18,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LUMINANCE\\\\\\\"},{\\\\\\\"Id\\\\\\\":649,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":18,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SEAL SOFTWARE/DOCUSIGN\\\\\\\"},{\\\\\\\"Id\\\\\\\":650,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":18,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":19,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Knowledge Management\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Knowledge Management\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"bffd891d-1a17-4408-85c8-5793c2a0265d\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":651,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":652,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ATLAS BY CLEARPEOPLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":653,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"AUTONONOMY IDOL\\\\\\\"},{\\\\\\\"Id\\\\\\\":654,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"AXCELERATE/OPENTEXT\\\\\\\"},{\\\\\\\"Id\\\\\\\":655,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"AYFIE\\\\\\\"},{\\\\\\\"Id\\\\\\\":656,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BA INSIGHT/UPLAND\\\\\\\"},{\\\\\\\"Id\\\\\\\":657,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BAILEY SOLUTIONS KNOWALL\\\\\\\"},{\\\\\\\"Id\\\\\\\":658,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":659,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CASETEXT\\\\\\\"},{\\\\\\\"Id\\\\\\\":660,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DECISIV SEARCH/OPENTEXT\\\\\\\"},{\\\\\\\"Id\\\\\\\":661,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DRAFTWISE\\\\\\\"},{\\\\\\\"Id\\\\\\\":662,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ELITER MATTERSPHERE\\\\\\\"},{\\\\\\\"Id\\\\\\\":663,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"HANDSHAKE/ADERANT\\\\\\\"},{\\\\\\\"Id\\\\\\\":664,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"14\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"HIGHQ\\\\\\\"},{\\\\\\\"Id\\\\\\\":665,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"15\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INTAPP EXPERIENCE\\\\\\\"},{\\\\\\\"Id\\\\\\\":666,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"16\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INTELLLEX\\\\\\\"},{\\\\\\\"Id\\\\\\\":667,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"17\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXIS LIBRARY\\\\\\\"},{\\\\\\\"Id\\\\\\\":668,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"18\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXIS PSL\\\\\\\"},{\\\\\\\"Id\\\\\\\":669,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"19\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXSOFT T3\\\\\\\"},{\\\\\\\"Id\\\\\\\":670,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"20\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LIBRYO\\\\\\\"},{\\\\\\\"Id\\\\\\\":671,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"21\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LITERA CREATE\\\\\\\"},{\\\\\\\"Id\\\\\\\":672,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"22\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LITERA FOUNDATION\\\\\\\"},{\\\\\\\"Id\\\\\\\":673,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"23\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MICROSOFT 365\\\\\\\"},{\\\\\\\"Id\\\\\\\":674,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"24\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MICROSOFT FAST\\\\\\\"},{\\\\\\\"Id\\\\\\\":675,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"25\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MICROSOFT POWER PLATFORM\\\\\\\"},{\\\\\\\"Id\\\\\\\":676,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"26\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MICROSOFT SHAREPOINT\\\\\\\"},{\\\\\\\"Id\\\\\\\":677,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"27\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MICROSOFT TEAMS\\\\\\\"},{\\\\\\\"Id\\\\\\\":678,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"28\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MOONLIT.AI\\\\\\\"},{\\\\\\\"Id\\\\\\\":679,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"29\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NALYTICS /NALANDA TECHNOLOGY\\\\\\\"},{\\\\\\\"Id\\\\\\\":680,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"30\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PRACTICAL LAW\\\\\\\"},{\\\\\\\"Id\\\\\\\":681,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"31\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"QLIK\\\\\\\"},{\\\\\\\"Id\\\\\\\":682,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"32\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"RAVN INSIGHT/IMANAGE\\\\\\\"},{\\\\\\\"Id\\\\\\\":683,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"33\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SINEQUA\\\\\\\"},{\\\\\\\"Id\\\\\\\":684,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"34\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SOLCARA\\\\\\\"},{\\\\\\\"Id\\\\\\\":685,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"35\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TIGER EYE BLUEPRINT\\\\\\\"},{\\\\\\\"Id\\\\\\\":686,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"36\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"WESTLAW\\\\\\\"},{\\\\\\\"Id\\\\\\\":687,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":19,\\\\\\\"Key\\\\\\\":\\\\\\\"37\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":20,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Library Management\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Library Management\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"17844da3-d104-4a56-9d6c-a9d2a0dd536c\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":688,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":20,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":689,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":20,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BAILEY SOLUTIONS\\\\\\\"},{\\\\\\\"Id\\\\\\\":690,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":20,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":691,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":20,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"EOS LIBRARY MANAGEMENT\\\\\\\"},{\\\\\\\"Id\\\\\\\":692,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":20,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"HERITAGE CIRQA\\\\\\\"},{\\\\\\\"Id\\\\\\\":693,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":20,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INMAGIC\\\\\\\"},{\\\\\\\"Id\\\\\\\":694,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":20,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXISNEXIS PSL\\\\\\\"},{\\\\\\\"Id\\\\\\\":695,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":20,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OLIB\\\\\\\"},{\\\\\\\"Id\\\\\\\":696,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":20,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SOFTLINK\\\\\\\"},{\\\\\\\"Id\\\\\\\":697,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":20,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SOUTRON GENIE LMS\\\\\\\"},{\\\\\\\"Id\\\\\\\":698,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":20,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SYDNEYPLUS\\\\\\\"},{\\\\\\\"Id\\\\\\\":699,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":20,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"THOMSON REUTERS PLC\\\\\\\"},{\\\\\\\"Id\\\\\\\":700,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":20,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"UNICORN\\\\\\\"},{\\\\\\\"Id\\\\\\\":701,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":20,\\\\\\\"Key\\\\\\\":\\\\\\\"14\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":21,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Document Versioning Production\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Document Versioning Production\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"799b5114-b672-4da7-a435-ecf979c9aaf6\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":702,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":703,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":704,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BROCHET\\\\\\\"},{\\\\\\\"Id\\\\\\\":705,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BUNDLEDOCS\\\\\\\"},{\\\\\\\"Id\\\\\\\":706,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DOCSCORP/LITERA\\\\\\\"},{\\\\\\\"Id\\\\\\\":707,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ENABLE/PINNACLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":708,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"HIGHQ/THOMSON REUTERS\\\\\\\"},{\\\\\\\"Id\\\\\\\":709,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"IPHELION/BIGHAND\\\\\\\"},{\\\\\\\"Id\\\\\\\":710,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"KIM TECHNOLOGIES\\\\\\\"},{\\\\\\\"Id\\\\\\\":711,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"KUTANA KAPPRIS\\\\\\\"},{\\\\\\\"Id\\\\\\\":712,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LITERA CREATE\\\\\\\"},{\\\\\\\"Id\\\\\\\":713,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SYSERO\\\\\\\"},{\\\\\\\"Id\\\\\\\":714,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TIKIT TMS/ADVANCED\\\\\\\"},{\\\\\\\"Id\\\\\\\":715,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"14\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"WORKSHARE/LITERA\\\\\\\"},{\\\\\\\"Id\\\\\\\":716,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"15\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ZYLPHA\\\\\\\"},{\\\\\\\"Id\\\\\\\":717,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":21,\\\\\\\"Key\\\\\\\":\\\\\\\"16\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":22,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Transaction Management\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Transaction Management\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"1749ddbc-7df0-4246-90f0-1b625596b5f8\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":718,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":22,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":719,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":22,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":720,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":22,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CLOSD/LEXISNEXIS\\\\\\\"},{\\\\\\\"Id\\\\\\\":721,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":22,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CLOSING FOLDERS/IMANAGE\\\\\\\"},{\\\\\\\"Id\\\\\\\":722,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":22,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DEALCLOSER\\\\\\\"},{\\\\\\\"Id\\\\\\\":723,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":22,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"HIGHQ/THOMSON REUTERS\\\\\\\"},{\\\\\\\"Id\\\\\\\":724,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":22,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"JIGSAW\\\\\\\"},{\\\\\\\"Id\\\\\\\":725,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":22,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEGATICS\\\\\\\"},{\\\\\\\"Id\\\\\\\":726,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":22,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"STRUCTUREFLOW\\\\\\\"},{\\\\\\\"Id\\\\\\\":727,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":22,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"THEDOCYARD/ANSARADA\\\\\\\"},{\\\\\\\"Id\\\\\\\":728,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":22,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TRANSACT/LITERA\\\\\\\"},{\\\\\\\"Id\\\\\\\":729,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":22,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":23,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"HR Software\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"HR Software\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"850a20be-ab10-457f-9fb7-30a006213284\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":730,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":731,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ACCESS SELECTHR\\\\\\\"},{\\\\\\\"Id\\\\\\\":732,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ACTIONFILE\\\\\\\"},{\\\\\\\"Id\\\\\\\":733,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ADP HR\\\\\\\"},{\\\\\\\"Id\\\\\\\":734,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ADVANCED HR\\\\\\\"},{\\\\\\\"Id\\\\\\\":735,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":736,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BOND TEAMSPIRIT\\\\\\\"},{\\\\\\\"Id\\\\\\\":737,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CASCADE HR\\\\\\\"},{\\\\\\\"Id\\\\\\\":738,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CINTRAHR\\\\\\\"},{\\\\\\\"Id\\\\\\\":739,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CIPHR\\\\\\\"},{\\\\\\\"Id\\\\\\\":740,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"FAIRSAIL\\\\\\\"},{\\\\\\\"Id\\\\\\\":741,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"HPRO\\\\\\\"},{\\\\\\\"Id\\\\\\\":742,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INTELLECT HR\\\\\\\"},{\\\\\\\"Id\\\\\\\":743,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"14\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MIDLAND HR/MHT GLOBAL\\\\\\\"},{\\\\\\\"Id\\\\\\\":744,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"15\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NORTHGATE\\\\\\\"},{\\\\\\\"Id\\\\\\\":745,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"16\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ORACLE HUMAN CAPITAL MANAGEMENT\\\\\\\"},{\\\\\\\"Id\\\\\\\":746,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"17\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PEOPLESOFT/ORACLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":747,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"18\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PYRAMID HR\\\\\\\"},{\\\\\\\"Id\\\\\\\":748,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"19\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SAGE\\\\\\\"},{\\\\\\\"Id\\\\\\\":749,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"20\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SAP\\\\\\\"},{\\\\\\\"Id\\\\\\\":750,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"21\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SOFTWARE FOR PEOPLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":751,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"22\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"THE PEOPLE MANAGER\\\\\\\"},{\\\\\\\"Id\\\\\\\":752,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":23,\\\\\\\"Key\\\\\\\":\\\\\\\"23\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":24,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Risk and Compliance\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Risk and Compliance\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"6e11f602-72c2-4713-a010-16d824aeaf1b\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":753,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":754,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ACCUITY\\\\\\\"},{\\\\\\\"Id\\\\\\\":755,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":756,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DARKTRACE\\\\\\\"},{\\\\\\\"Id\\\\\\\":757,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DOCSCORP/LITERA\\\\\\\"},{\\\\\\\"Id\\\\\\\":758,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DUN & BRADSTREET\\\\\\\"},{\\\\\\\"Id\\\\\\\":759,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ELITE MATTERSPHERE\\\\\\\"},{\\\\\\\"Id\\\\\\\":760,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"IMANAGE SECURITY POLICY MANAGER\\\\\\\"},{\\\\\\\"Id\\\\\\\":761,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"IMANAGE THREAT MANAGER\\\\\\\"},{\\\\\\\"Id\\\\\\\":762,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INTAPP\\\\\\\"},{\\\\\\\"Id\\\\\\\":763,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INTRASPEXION\\\\\\\"},{\\\\\\\"Id\\\\\\\":764,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"KIM TECHNOLOGIES\\\\\\\"},{\\\\\\\"Id\\\\\\\":765,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEGAL COMPLIANCE/ACCESS GROUP\\\\\\\"},{\\\\\\\"Id\\\\\\\":766,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"14\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXISNEXIS PSL RISK AND COMPLIANCE\\\\\\\"},{\\\\\\\"Id\\\\\\\":767,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"15\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"METACOMPLIANCE\\\\\\\"},{\\\\\\\"Id\\\\\\\":768,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"16\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NETDOCUMENTS\\\\\\\"},{\\\\\\\"Id\\\\\\\":769,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"17\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PROSPEROWARE\\\\\\\"},{\\\\\\\"Id\\\\\\\":770,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"18\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"RELIANCE/THE ACCESS GROUP\\\\\\\"},{\\\\\\\"Id\\\\\\\":771,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"19\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"RSM TRACKER\\\\\\\"},{\\\\\\\"Id\\\\\\\":772,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"20\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SYSERO\\\\\\\"},{\\\\\\\"Id\\\\\\\":773,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"21\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TESSIAN\\\\\\\"},{\\\\\\\"Id\\\\\\\":774,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"22\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TIMESLICE\\\\\\\"},{\\\\\\\"Id\\\\\\\":775,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"23\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"VINCIWORKS\\\\\\\"},{\\\\\\\"Id\\\\\\\":776,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":24,\\\\\\\"Key\\\\\\\":\\\\\\\"24\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":25,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Cyber Security\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Cyber Security\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"4b3fbddd-9630-460e-b1d1-73b9bb86b1af\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":777,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":25,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":778,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":25,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":779,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":25,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CISCO\\\\\\\"},{\\\\\\\"Id\\\\\\\":780,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":25,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CROWDSTRIKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":781,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":25,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CYBERGUARD\\\\\\\"},{\\\\\\\"Id\\\\\\\":782,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":25,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DARKTRACE\\\\\\\"},{\\\\\\\"Id\\\\\\\":783,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":25,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ICRITICAL\\\\\\\"},{\\\\\\\"Id\\\\\\\":784,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":25,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"POSTINI/GOOGLE APPS\\\\\\\"},{\\\\\\\"Id\\\\\\\":785,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":25,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"RED SIFT\\\\\\\"},{\\\\\\\"Id\\\\\\\":786,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":25,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SENTINEL ONE\\\\\\\"},{\\\\\\\"Id\\\\\\\":787,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":25,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SOLEBIT/MIMECAST\\\\\\\"},{\\\\\\\"Id\\\\\\\":788,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":25,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":26,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Email Security\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Email Security\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"139735c9-9903-4fc4-ad0c-488920327d1e\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":789,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":26,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":790,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":26,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":791,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":26,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CLEARSWIFT MAILSWEEPER\\\\\\\"},{\\\\\\\"Id\\\\\\\":792,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":26,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"EGRESS\\\\\\\"},{\\\\\\\"Id\\\\\\\":793,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":26,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MESSAGELABS\\\\\\\"},{\\\\\\\"Id\\\\\\\":794,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":26,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MICROSOFT\\\\\\\"},{\\\\\\\"Id\\\\\\\":795,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":26,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MIMECAST\\\\\\\"},{\\\\\\\"Id\\\\\\\":796,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":26,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OOSHA\\\\\\\"},{\\\\\\\"Id\\\\\\\":797,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":26,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PROOFPOINT\\\\\\\"},{\\\\\\\"Id\\\\\\\":798,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":26,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":27,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Time Recording and Invoicing\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Time Recording and Invoicing\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"03fbc7c6-12f4-4b30-877a-59291db4e54d\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":799,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":800,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ADERANT EXPERT\\\\\\\"},{\\\\\\\"Id\\\\\\\":801,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ADERANT ITIME KEEP\\\\\\\"},{\\\\\\\"Id\\\\\\\":802,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"AXXIA DESKTOP\\\\\\\"},{\\\\\\\"Id\\\\\\\":803,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":804,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BILL4TIME\\\\\\\"},{\\\\\\\"Id\\\\\\\":805,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BILLINGQ/NQ ZEBRAWORKS\\\\\\\"},{\\\\\\\"Id\\\\\\\":806,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BILLSTREAM/INTAPP\\\\\\\"},{\\\\\\\"Id\\\\\\\":807,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CLIO\\\\\\\"},{\\\\\\\"Id\\\\\\\":808,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ELITE 3E\\\\\\\"},{\\\\\\\"Id\\\\\\\":809,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ELITE ENVISION\\\\\\\"},{\\\\\\\"Id\\\\\\\":810,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INTAPP\\\\\\\"},{\\\\\\\"Id\\\\\\\":811,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INTAPP REKOOP\\\\\\\"},{\\\\\\\"Id\\\\\\\":812,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"14\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEANLAW\\\\\\\"},{\\\\\\\"Id\\\\\\\":813,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"15\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXISNEXIS VISUALFILES\\\\\\\"},{\\\\\\\"Id\\\\\\\":814,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"16\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OSPREY\\\\\\\"},{\\\\\\\"Id\\\\\\\":815,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"17\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PEPPERMINT TECHNOLOGY\\\\\\\"},{\\\\\\\"Id\\\\\\\":816,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"18\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PING\\\\\\\"},{\\\\\\\"Id\\\\\\\":817,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"19\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SOS SOFTWARE\\\\\\\"},{\\\\\\\"Id\\\\\\\":818,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"20\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TIKIT CARPE DIEM\\\\\\\"},{\\\\\\\"Id\\\\\\\":819,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"21\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TOWER LAW SMART TIME APP\\\\\\\"},{\\\\\\\"Id\\\\\\\":820,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"22\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ZERO\\\\\\\"},{\\\\\\\"Id\\\\\\\":821,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":27,\\\\\\\"Key\\\\\\\":\\\\\\\"23\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":28,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Collaboration and Extranets\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Collaboartion and Extranets\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"4e02a619-9654-4e1a-a91c-87881d8e750c\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":822,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":823,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ANSARADA\\\\\\\"},{\\\\\\\"Id\\\\\\\":824,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":825,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CITRIX SHAREFILE\\\\\\\"},{\\\\\\\"Id\\\\\\\":826,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"EGRESS\\\\\\\"},{\\\\\\\"Id\\\\\\\":827,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"FIRMEX\\\\\\\"},{\\\\\\\"Id\\\\\\\":828,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"HIGHQ COLLABORATE\\\\\\\"},{\\\\\\\"Id\\\\\\\":829,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"IMANAGE SHARE\\\\\\\"},{\\\\\\\"Id\\\\\\\":830,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INTRALINKS\\\\\\\"},{\\\\\\\"Id\\\\\\\":831,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"KENTICO\\\\\\\"},{\\\\\\\"Id\\\\\\\":832,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LUPL\\\\\\\"},{\\\\\\\"Id\\\\\\\":833,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MERRILL\\\\\\\"},{\\\\\\\"Id\\\\\\\":834,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MICROSOFT SHAREPOINT\\\\\\\"},{\\\\\\\"Id\\\\\\\":835,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"14\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MICROSOFT TEAMS\\\\\\\"},{\\\\\\\"Id\\\\\\\":836,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"15\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NETDOCUMENTS COLLABSPACES\\\\\\\"},{\\\\\\\"Id\\\\\\\":837,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"16\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NIKEC HUBSHARE\\\\\\\"},{\\\\\\\"Id\\\\\\\":838,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"17\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OMBUD\\\\\\\"},{\\\\\\\"Id\\\\\\\":839,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"18\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"RUBY DATUM\\\\\\\"},{\\\\\\\"Id\\\\\\\":840,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"19\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SAFELINK\\\\\\\"},{\\\\\\\"Id\\\\\\\":841,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"20\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SAFELINK DATAROOMS\\\\\\\"},{\\\\\\\"Id\\\\\\\":842,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"21\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"VDRHQ\\\\\\\"},{\\\\\\\"Id\\\\\\\":843,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":28,\\\\\\\"Key\\\\\\\":\\\\\\\"22\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":29,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Low Code No Code\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Low Code No Code\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"13c4a1ac-5bfe-4eb6-b95a-49a18734e8d8\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":844,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":29,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":845,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":29,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"AUTOLOGYX\\\\\\\"},{\\\\\\\"Id\\\\\\\":846,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":29,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"AUTTO\\\\\\\"},{\\\\\\\"Id\\\\\\\":847,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":29,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":848,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":29,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BRYTER\\\\\\\"},{\\\\\\\"Id\\\\\\\":849,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":29,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CHECKBOX\\\\\\\"},{\\\\\\\"Id\\\\\\\":850,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":29,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"FLIPLET\\\\\\\"},{\\\\\\\"Id\\\\\\\":851,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":29,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"JOSEF\\\\\\\"},{\\\\\\\"Id\\\\\\\":852,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":29,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"KIM TECHNOLOGIES\\\\\\\"},{\\\\\\\"Id\\\\\\\":853,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":29,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LAWDROID\\\\\\\"},{\\\\\\\"Id\\\\\\\":854,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":29,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NEOTA LOGIC\\\\\\\"},{\\\\\\\"Id\\\\\\\":855,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":29,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OMNIA\\\\\\\"},{\\\\\\\"Id\\\\\\\":856,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":29,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":30,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Matter Pricing Planning\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Matter Pricing Planning\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"1f1d7eba-0c85-4cae-a3d4-8086da32a66b\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":857,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":30,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":858,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":30,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"3E MATTER PRICING\\\\\\\"},{\\\\\\\"Id\\\\\\\":859,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":30,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ADERANT EXPERT MATTERWORKS\\\\\\\"},{\\\\\\\"Id\\\\\\\":860,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":30,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":861,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":30,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BIGHAND PRICING AND PROFITABILITY\\\\\\\"},{\\\\\\\"Id\\\\\\\":862,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":30,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CLOCKTIMIZER/LITERA\\\\\\\"},{\\\\\\\"Id\\\\\\\":863,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":30,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DIGITORY LEGAL\\\\\\\"},{\\\\\\\"Id\\\\\\\":864,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":30,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PROSPEROWARE UMBRIA\\\\\\\"},{\\\\\\\"Id\\\\\\\":865,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":30,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":31,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"BI\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"BI\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"00c49579-a602-4e01-90bc-b2381c4014e1\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":866,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":31,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":867,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":31,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ADERANT\\\\\\\"},{\\\\\\\"Id\\\\\\\":868,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":31,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":869,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":31,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ECLIPSE PROCLAIM BI\\\\\\\"},{\\\\\\\"Id\\\\\\\":870,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":31,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ELITE\\\\\\\"},{\\\\\\\"Id\\\\\\\":871,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":31,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"IRIDIUM/BIGHAND BUSINESS INTELLIGENCE\\\\\\\"},{\\\\\\\"Id\\\\\\\":872,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":31,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"KATCHR\\\\\\\"},{\\\\\\\"Id\\\\\\\":873,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":31,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MICROSOFT POWER BI\\\\\\\"},{\\\\\\\"Id\\\\\\\":874,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":31,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":32,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Inforamtion Governance\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Inforamtion Governance\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"314cb504-35a0-42ad-8166-185e63526baa\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":875,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":32,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":876,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":32,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ADAPTIVE SOLUTIONS\\\\\\\"},{\\\\\\\"Id\\\\\\\":877,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":32,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":878,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":32,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"FILETRAIL\\\\\\\"},{\\\\\\\"Id\\\\\\\":879,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":32,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INFINNIUM\\\\\\\"},{\\\\\\\"Id\\\\\\\":880,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":32,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEGALRM\\\\\\\"},{\\\\\\\"Id\\\\\\\":881,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":32,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MANZAMA/DILIGENT\\\\\\\"},{\\\\\\\"Id\\\\\\\":882,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":32,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":33,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Litigation Analytics\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Litigation Analytics\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"a73a6aeb-3d1a-4807-b77f-67fc354ec8a3\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":883,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":33,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":884,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":33,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":885,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":33,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BLUEJ LEGAL\\\\\\\"},{\\\\\\\"Id\\\\\\\":886,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":33,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CASEMINE\\\\\\\"},{\\\\\\\"Id\\\\\\\":887,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":33,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CASETEXT\\\\\\\"},{\\\\\\\"Id\\\\\\\":888,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":33,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"GAVELYTICS\\\\\\\"},{\\\\\\\"Id\\\\\\\":889,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":33,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEX MACHINA/LEXISNEXIS\\\\\\\"},{\\\\\\\"Id\\\\\\\":890,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":33,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LEXIS+\\\\\\\"},{\\\\\\\"Id\\\\\\\":891,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":33,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SOLOMONICS\\\\\\\"},{\\\\\\\"Id\\\\\\\":892,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":33,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"VIZ LEGAL\\\\\\\"},{\\\\\\\"Id\\\\\\\":893,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":33,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"WESTLAW EDGE\\\\\\\"},{\\\\\\\"Id\\\\\\\":894,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":33,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":34,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Task Delegation\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Task Delegation\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"62af0ee0-5c1a-422f-8b1d-af68b3329fa6\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":895,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":34,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":896,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":34,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":897,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":34,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BIGHAND NOW\\\\\\\"},{\\\\\\\"Id\\\\\\\":898,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":34,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CAPACITY MANAGER\\\\\\\"},{\\\\\\\"Id\\\\\\\":899,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":34,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":35,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"eDiscovery\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"eDiscovery\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"9e996a55-6cbf-4ba6-8460-ac6506323326\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":900,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":901,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":902,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CLOUDNINE\\\\\\\"},{\\\\\\\"Id\\\\\\\":903,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"CONSILIO\\\\\\\"},{\\\\\\\"Id\\\\\\\":904,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DISCO\\\\\\\"},{\\\\\\\"Id\\\\\\\":905,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"EPIQ\\\\\\\"},{\\\\\\\"Id\\\\\\\":906,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"7\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"EVERLAW\\\\\\\"},{\\\\\\\"Id\\\\\\\":907,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"8\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"EXIGENT\\\\\\\"},{\\\\\\\"Id\\\\\\\":908,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"9\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"EXTERRO\\\\\\\"},{\\\\\\\"Id\\\\\\\":909,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"10\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"FRONTEO\\\\\\\"},{\\\\\\\"Id\\\\\\\":910,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"11\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"HANZO\\\\\\\"},{\\\\\\\"Id\\\\\\\":911,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"12\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"IPRO\\\\\\\"},{\\\\\\\"Id\\\\\\\":912,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"13\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"KL DISCOVERY\\\\\\\"},{\\\\\\\"Id\\\\\\\":913,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"14\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LDM GLOBAL\\\\\\\"},{\\\\\\\"Id\\\\\\\":914,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"15\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LOGIKCULL\\\\\\\"},{\\\\\\\"Id\\\\\\\":915,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"16\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"LUMINANCE\\\\\\\"},{\\\\\\\"Id\\\\\\\":916,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"17\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"MICROSOFT\\\\\\\"},{\\\\\\\"Id\\\\\\\":917,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"18\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NEXTPOINT\\\\\\\"},{\\\\\\\"Id\\\\\\\":918,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"19\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NUIX\\\\\\\"},{\\\\\\\"Id\\\\\\\":919,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"20\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ONE DISCOVERY\\\\\\\"},{\\\\\\\"Id\\\\\\\":920,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"21\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ONNA\\\\\\\"},{\\\\\\\"Id\\\\\\\":921,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"22\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OPENTEXT AXCELERATE\\\\\\\"},{\\\\\\\"Id\\\\\\\":922,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"23\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PAGEFREEZER\\\\\\\"},{\\\\\\\"Id\\\\\\\":923,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"24\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"QUISLEX\\\\\\\"},{\\\\\\\"Id\\\\\\\":924,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"25\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"RELATIVITY\\\\\\\"},{\\\\\\\"Id\\\\\\\":925,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"26\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"RELATIVITYONE\\\\\\\"},{\\\\\\\"Id\\\\\\\":926,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"27\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"REVEAL\\\\\\\"},{\\\\\\\"Id\\\\\\\":927,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"28\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SANDLINE DISCOVERY\\\\\\\"},{\\\\\\\"Id\\\\\\\":928,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"29\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"SERVIENT\\\\\\\"},{\\\\\\\"Id\\\\\\\":929,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"30\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TCDI\\\\\\\"},{\\\\\\\"Id\\\\\\\":930,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"31\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"VENIO SYSTEMS\\\\\\\"},{\\\\\\\"Id\\\\\\\":931,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"32\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"X1 DISCOVERY\\\\\\\"},{\\\\\\\"Id\\\\\\\":932,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"33\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ZAPPROVED\\\\\\\"},{\\\\\\\"Id\\\\\\\":933,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"34\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ZDISCOVERY\\\\\\\"},{\\\\\\\"Id\\\\\\\":934,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"35\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ZYLAB\\\\\\\"},{\\\\\\\"Id\\\\\\\":935,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":35,\\\\\\\"Key\\\\\\\":\\\\\\\"36\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":36,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Strategic Management\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Strategic Management\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"5b33ca18-140b-4b06-a633-36cf3dbb547e\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":936,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":36,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":937,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":36,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":938,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":36,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OBJECTIVE MANAGER /LITERA\\\\\\\"},{\\\\\\\"Id\\\\\\\":939,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":36,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":37,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"Data Integration Management\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"Data Intergation Management\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"eff39b8d-09d7-4a6c-9e1f-7a419533540d\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":940,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":37,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":941,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":37,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":942,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":37,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"FOUNDATION/LITERA\\\\\\\"},{\\\\\\\"Id\\\\\\\":943,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":37,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"INTAPP INTEGRATE\\\\\\\"},{\\\\\\\"Id\\\\\\\":944,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":37,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY)\\\\\\\"},{\\\\\\\"Id\\\\\\\":945,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":37,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"TRUSTED DATA SOLUTIONS\\\\\\\"}]\\\"},{\\\"ListProperty\\\":\\\"{\\\\\\\"Id\\\\\\\":38,\\\\\\\"DocumentOnlyAudienceMaster\\\\\\\":145,\\\\\\\"Name\\\\\\\":\\\\\\\"eSign\\\\\\\",\\\\\\\"Description\\\\\\\":\\\\\\\"eSign\\\\\\\",\\\\\\\"NewId\\\\\\\":null,\\\\\\\"UniqueId\\\\\\\":\\\\\\\"78669d40-0f6f-413a-8c05-96c11d1ec13a\\\\\\\"}\\\",\\\"ListDetails\\\":\\\"[{\\\\\\\"Id\\\\\\\":946,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":38,\\\\\\\"Key\\\\\\\":\\\\\\\"1\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"NOT APPLICABLE\\\\\\\"},{\\\\\\\"Id\\\\\\\":947,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":38,\\\\\\\"Key\\\\\\\":\\\\\\\"2\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"ADOBE SIGN\\\\\\\"},{\\\\\\\"Id\\\\\\\":948,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":38,\\\\\\\"Key\\\\\\\":\\\\\\\"3\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"BESPOKE\\\\\\\"},{\\\\\\\"Id\\\\\\\":949,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":38,\\\\\\\"Key\\\\\\\":\\\\\\\"4\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"DOCUSIGN\\\\\\\"},{\\\\\\\"Id\\\\\\\":950,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":38,\\\\\\\"Key\\\\\\\":\\\\\\\"5\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"PANDADOC\\\\\\\"},{\\\\\\\"Id\\\\\\\":951,\\\\\\\"DocumentOnlyListMasterId\\\\\\\":38,\\\\\\\"Key\\\\\\\":\\\\\\\"6\\\\\\\",\\\\\\\"Value\\\\\\\":\\\\\\\"OTHER (PLEASE SPECIFY\\\\\\\"}]\\\"}]\",\"Pages\":\"1\"}","Expressions":"[]","Template":"{\"Id\":244,\"AcountId\":0,\"TemplateId\":1676,\"FileName\":\"Legal 200 Survey KIM DOCUMENT Form 1 August 2022.docx\",\"Description\":\"To gather consistent data\",\"DisplayName\":\"Legal Technology Survey\",\"DocumentOnlyAudienceId\":145,\"AllowEsign\":false,\"AllowCheckInOut\":true,\"eSignProvider\":\"\",\"eSignIntegrationKey\":\"\",\"eSignUserId\":\"\",\"eSignPassword\":\"\",\"eSignURL\":\"\",\"PropertyBag\":\"{\\\"Clon\\\":null,\\\"emailMoniker\\\":\\\"Legal Technology Survey\\\",\\\"Released\\\":true,\\\"Culture\\\":\\\"en-US\\\",\\\"CultureName\\\":\\\"English (United States) - [en-US]\\\",\\\"AllowDocX\\\":true,\\\"AllowSendMail\\\":true,\\\"DocumentCreation\\\":true,\\\"DocumentDelete\\\":false,\\\"DocumentShare\\\":true,\\\"TemplateEdit\\\":false,\\\"TemplateShare\\\":false,\\\"TemplateDelete\\\":false,\\\"DefaultDescription\\\":\\\"Legal 200 Tech Survey\\\",\\\"TemplateRemove\\\":false,\\\"UseServiceAccount\\\":true}\",\"Category\":\"Legal Technology\",\"DisplayNameToolTip\":\"Survey of top 200 law firms\",\"TemplateContent\":\"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\",\"AllowDocumentUpdate\":true,\"AllowNotification\":true,\"EmailMoniker\":null,\"OwnerFullName\":\"Karl Chapman\",\"OwnerDisplayName\":\"Karl Chapman (Legal Technology Survey)\",\"OwnerUserName\":\"karl.chapman@kimtechnologies.com\",\"CoOwner\":false,\"CreateDocument\":true,\"AudienceName\":\"Legal Technology\",\"IsSubForm\":false,\"ActiveSubscription\":true,\"SubscriptionStatusMessage\":\"\",\"IsDocusign\":false,\"isClixsignature\":null,\"Billing\":false}","Protected":false,"AppName":"https://uk.kim.ai","Version":"1.0"}